import{_ as a,c as t,o as e,a3 as i}from"./chunks/framework.b23AWjfV.js";const s="/zijieyuan-blog-pages/assets/patchpackge._FveP6v3.png",p="/zijieyuan-blog-pages/assets/patch_package_patchfile.BiWJ8Nxt.jpg",l="/zijieyuan-blog-pages/assets/patch_package_result.D9X7mSiq.jpg",m=JSON.parse('{"title":"patch-package","description":"","frontmatter":{},"headers":[],"relativePath":"Toolkit/每日工具库/8.patch-package.md","filePath":"Toolkit/每日工具库/8.patch-package.md"}'),c={name:"Toolkit/每日工具库/8.patch-package.md"},n=i(`<h1 id="patch-package" tabindex="-1">patch-package <a class="header-anchor" href="#patch-package" aria-label="Permalink to &quot;patch-package&quot;">​</a></h1><h2 id="patch-package-是什么" tabindex="-1">patch-package 是什么？ <a class="header-anchor" href="#patch-package-是什么" aria-label="Permalink to &quot;patch-package 是什么？&quot;">​</a></h2><blockquote><p>功能介绍</p></blockquote><ul><li>修复第三方包的 bug：开发人员可以使用 patch-package 快速修复第三方包中的 bug，而无需等待原始包的维护者发布修复版本。</li><li>添加自定义功能：通过 patch-package，开发人员可以添加自定义功能到第三方包中，而无需修改原始包的源码。</li><li>版本控制：patch-package 生成的补丁文件可以与代码版本控制系统一起使用，从而确保团队成员之间对第三方包的修改得到有效管理和共享。</li><li>避免 fork：使用 patch-package 可以避免因为需要修改第三方包而进行 fork，从而减少维护成本和复杂度。</li></ul><blockquote><p>patch-package 的原理</p></blockquote><ul><li>patch-package 的原理是基于 npm 包的本地补丁。当开发人员使用 patch-package 时，它会创建一个补丁文件（以 .patch 结尾），该补丁文件包含了对第三方包的修改内容。然后，patch-package 会在 npm install 时自动应用这些补丁，从而实现对第三方包的修改。</li></ul><h2 id="patch-package-的功能使用" tabindex="-1">patch-package 的功能使用 <a class="header-anchor" href="#patch-package-的功能使用" aria-label="Permalink to &quot;patch-package 的功能使用&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打补丁后面跟一个包名；会生成一个patchs文件目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package-name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npx patch-package package-name</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用补丁</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-packag</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npx patch-package</span></span></code></pre></div><blockquote><p>API 列表</p></blockquote><table tabindex="0"><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>--create-issue</td><td>当应用补丁时，如果发现问题，自动创建一个 GitHub issue 来报告问题。</td></tr><tr><td>--use-yarn</td><td>使用 yarn 而不是 npm 来安装依赖和应用补丁。</td></tr><tr><td>--exclude <code>&lt;regexp&gt;</code></td><td>排除匹配指定正则表达式的文件，这些文件将不会被包含在补丁中。</td></tr><tr><td>--include <code>&lt;regexp&gt; </code></td><td>只包含匹配指定正则表达式的文件，其他文件将不会被包含在补丁中。</td></tr><tr><td>--case-sensitive-path-filtering</td><td>在应用补丁时，对文件路径进行大小写敏感的过滤。</td></tr><tr><td>--patch-dir</td><td>指定存储补丁文件的目录，而不是默认的 <code>patches</code> 目录。</td></tr></tbody></table><h2 id="patch-package-的原理" tabindex="-1">patch-package 的原理 <a class="header-anchor" href="#patch-package-的原理" aria-label="Permalink to &quot;patch-package 的原理&quot;">​</a></h2><blockquote><p>patches 文件的生成</p></blockquote><ul><li>首先 patch-package 会创建一个临时目录</li><li>然后在这个目录写入一个 package.json 文件，dependencies 就是命令行参数指定的包名</li><li>然后它会在这个目录下执行 yarn install 或者 npm install（patch-package 现在不支持 pnpm）</li><li>之后就进行 git 的 init、add、commit，生成一个基础的 commit。</li><li>然后把现在 node_modules 目录下的这个被修改过的包复制过去</li><li>之后再 git add，然后执行 git diff，就能拿到改动的 diff</li></ul><blockquote><p>应用 patches 的内容</p></blockquote><ul><li>patches 文件里记录了对哪几行做了新增，哪几行做了删除，哪几行做了修改。</li><li>应用这个 patches 文件的话，不就是找到对应文件的对应行数，做反向的操作</li><li>它读取 patches 文件之后会进行 parse：</li><li>这个 parse 的实现就是对每一行的字符串做判断，进行不同的处理：</li><li>最终能得到一个包含 diff 信息的对象，包含了对什么文件的哪些行做了什么修改：</li><li>之后对不同的类型做不同的操作就可以了</li></ul><h2 id="使用示例-修复第三方包中的-bug" tabindex="-1">使用示例:修复第三方包中的 bug <a class="header-anchor" href="#使用示例-修复第三方包中的-bug" aria-label="Permalink to &quot;使用示例:修复第三方包中的 bug&quot;">​</a></h2><blockquote><p>修改 npm 包</p></blockquote><ul><li><img src="`+s+'" alt="patchpackge" data-fancybox="gallery"></li></ul><blockquote><p>生成差异文件</p></blockquote><ul><li><img src="'+p+'" alt="patch_package_patchfile" data-fancybox="gallery"></li></ul><blockquote><p>应用差异文件</p></blockquote><ul><li><img src="'+l+'" alt="patch_package_result" data-fancybox="gallery"></li></ul>',22),h=[n];function k(o,d,r,g,u,b){return e(),t("div",null,h)}const y=a(c,[["render",k]]);export{m as __pageData,y as default};
