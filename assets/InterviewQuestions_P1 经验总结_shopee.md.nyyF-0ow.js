import{_ as s,c as i,o as a,a3 as l}from"./chunks/framework.b23AWjfV.js";const c=JSON.parse('{"title":"shopee","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewQuestions/P1 经验总结/shopee.md","filePath":"InterviewQuestions/P1 经验总结/shopee.md"}'),n={name:"InterviewQuestions/P1 经验总结/shopee.md"},h=l(`<h1 id="shopee" tabindex="-1">shopee <a class="header-anchor" href="#shopee" aria-label="Permalink to &quot;shopee&quot;">​</a></h1><h2 id="shopee-金融一面" tabindex="-1">shopee 金融一面 <a class="header-anchor" href="#shopee-金融一面" aria-label="Permalink to &quot;shopee 金融一面&quot;">​</a></h2><ol><li>了解 http？说一下 HTTPs 认证过程，</li><li>referrer，host，origin 有什么区别</li></ol><ul><li>Referer 提供了请求来源的具体页面地址(主要用于统计流量来源、防盗链、防止跨站请求伪造（CSRF）攻击等场景)</li><li>Host 标识了请求的目标主机和端口，<code>必备字段</code>(服务器通常会根据 Host 头部来区分同一 IP 地址上的多个虚拟主机，确保将请求路由到正确的网站)</li><li>Origin 则是在跨域请求中指明请求的原始安全上下文(主要服务于同源策略的安全机制，服务端可以根据这个头部信息判断请求是否来自合法的源，从而决定是否允许跨域请求)</li></ul><ol start="3"><li>mysql 知道怎么操作数据库么</li><li>ngnix 如何配置 304</li><li>说下 https，证书是如何校验的</li></ol><ul><li><code>客户端发送 https 请求</code>，把自身支持的秘钥算法套件（SSL 指定版本、加密组件列表）发送给服务器</li><li>服务器判断自身是否支持该算法套件，<code>如果支持则返回证书信息</code>(本质为公钥，包含了证书颁发机构，网址，过期时间等) ，否则断开连接，</li><li><code>客户端解析证书</code>(通过 TLS 协议来完成)，验证证书是否有效。如果异常，则会提示是否安装证书，常见的就是浏览器搜索栏左侧出现“X”告警按钮等。</li><li>如果证书有效、或者是授信安装证书后，<code>开始传送加密信息</code>(用证书加密后的随机值，供加解密使用)</li><li><code>服务端通过私钥解密加密信息</code>，得到客户端发送来的随机值，然后把内容通过该值进行对称加密。这样一来，除非知道私钥，否则是无法获取加密内容的。</li><li>服务端返回加密后的内容</li><li>客户端通过前面提到的随机值对加密信息进行解密</li></ul><ol start="6"><li>看代码输出</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;di&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p[key]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印几次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p[key]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印几次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><ol start="7"><li>写一个请求并发控制 addTask 函数，同时只有 5 个并发请求，同时可以取消任意一个</li><li>实现一个大数相加的方法</li></ol><h2 id="一面" tabindex="-1">一面 <a class="header-anchor" href="#一面" aria-label="Permalink to &quot;一面&quot;">​</a></h2><ol><li>单向链表输出倒数第 K 个元素</li><li>看代码输出结果（考察变量、函数提升）</li><li>看代码输出结果（考察异步代码先后顺序）</li><li>手写 instanceof 关键字</li><li>手写 Promise</li><li>react 中为什么不能在 for 循环、if 语句里使用 hooks，说下 react hooks 实现原理。</li><li>说下 react fiber。</li><li>看你之前做过 RN 开发，说下 RN 的原理。</li><li>说下输入一个 url 地址的全过程。</li><li>http 的缓存策略。</li><li>说下 https，证书是如何校验的？</li><li>说下 http2，你觉得阻碍 http2 发展的问题是什么？</li><li>算法题。跳格子问题，假设一次只能跳一个格子和两个格子，N 个格子有多少种跳法？</li></ol><h2 id="二面" tabindex="-1">二面 <a class="header-anchor" href="#二面" aria-label="Permalink to &quot;二面&quot;">​</a></h2><ol><li>自我介绍</li><li>为什么要离职？</li><li>对你的项目经历中 RN 做的 app 挺感兴趣的，你能详细说下这个项目吗？</li><li>RN 中原生和 js 端是如何通信的？你说后面使用 JSI 了，你能说下 JSI 的实现原理吗？</li><li>如果要你对这个 app 进行性能优化，你有哪些办法（面试官问了三次还有其他办法吗？）</li></ol><ul><li>代码层面，按照 react 的优化，减少 re-render 次数。图片加载用 react-native-fast-image,页面初始化的逻辑使用 InteractionManager.runAfterInteractions。去掉无用的 View 层。</li><li>进行分包加载，启动时只加载启动页面 bundle，二级及更深页面等访问到再加载。</li><li>一些复杂的控件，写原生模块，比如日期选择、下拉选择、级联、播放器等。</li></ul><ol start="6"><li>你们的 RN 热更新服务是怎么做的？热更新原理是什么？你们的热更新策略怎么做的？</li></ol><ul><li>客户端用的微软的 code-push,服务端用的 code-push-server。</li><li>热更新原理就是 app 每次启动会请求热更新服务器，对比下本地 bundle 版本和服务器的 bundle 版本，如果版本不一致，就会根据配置的更新策略下载、更新 bundle,然后重新 reload bundle。</li><li>我们就是在检查到新的 bundle 后，会弹窗强制更新。</li></ul><ol start="7"><li>设计一个 RN 热更新服务，需要考虑哪些地方？</li></ol><p>bundle 体积大的问题。打包的时候需要进行分包，使用增量更新，减少下载体积。 用户的网络不稳定、网速差问题。需要用 CDN 加速，支持断点续传。</p><ul><li>安全性问题。 <ul><li>bundle 被中间人劫持篡改。使用 https 下载，并按照 https 的加密思路，对</li><li>bundle 用 hash 算法进行签名，然后 app 端检验签名是否被篡改。</li><li>bundle 下载地址被暴力攻击。检查 User-Agent,只允许手机设备下载，记录设备 id，在一定时间内限制下载次数。 8. 你有什么要问我的吗？</li></ul></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://cloud.tencent.com/developer/article/1731552" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1731552</a></li><li><a href="https://juejin.cn/post/7070881399166730271" target="_blank" rel="noreferrer">https://juejin.cn/post/7070881399166730271</a></li></ul>`,22),t=[h];function e(p,k,r,E,d,o){return a(),i("div",null,t)}const y=s(n,[["render",e]]);export{c as __pageData,y as default};
