import{_ as t,c as e,o as r,a3 as a}from"./chunks/framework.b23AWjfV.js";const m=JSON.parse('{"title":"EcmaScript 规范","description":"","frontmatter":{},"headers":[],"relativePath":"MiscellaneousTalk/P3 你不知道的JavaScript/2.EcmaScript规范.md","filePath":"MiscellaneousTalk/P3 你不知道的JavaScript/2.EcmaScript规范.md"}'),d={name:"MiscellaneousTalk/P3 你不知道的JavaScript/2.EcmaScript规范.md"},n=a(`<h1 id="ecmascript-规范" tabindex="-1">EcmaScript 规范 <a class="header-anchor" href="#ecmascript-规范" aria-label="Permalink to &quot;EcmaScript 规范&quot;">​</a></h1><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><p><a href="https://262.ecma-international.org/14.0/#sec-array-exotic-objects" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-array-exotic-objects</a></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>An Array is an exotic object that gives special treatment to array index property keys (see 6.1.7). A property whose property name is an array index is also called an element. Every Array has a non-configurable &quot;length&quot; property whose value is always a non-negative integral Number whose mathematical value is strictly less than 232. The value of the &quot;length&quot; property is numerically greater than the name of every own property whose name is an array index; whenever an own property of an Array is created or changed, other properties are adjusted as necessary to maintain this invariant. Specifically, whenever an own property is added whose name is an array index, the value of the &quot;length&quot; property is changed, if necessary, to be one more than the numeric value of that array index; and whenever the value of the &quot;length&quot; property is changed, every own property whose name is an array index whose value is not smaller than the new length is deleted. This constraint applies only to own properties of an Array and is unaffected by &quot;length&quot; or array index properties that may be inherited from its prototypes.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组是一种特殊对象，对数组索引属性键（参见6.1.7）进行了特殊处理。属性名称为数组索引的属性也被称为元素。每个数组都有一个不可配置的 &quot;length&quot; 属性，其值始终是小于 2^32 的非负整数，其数学值严格小于 2^32。 &quot;length&quot; 属性的值在数值上大于每个名称为数组索引的自有属性的名称；每当创建或更改数组的自有属性时，其他属性会根据需要进行调整，以保持这个不变式。具体来说，每当添加一个名称为数组索引的自有属性时，如果需要， &quot;length&quot; 属性的值会更改为该数组索引的数值值加一；每当 &quot;length&quot; 属性的值更改时，所有名称为数组索引且值不小于新长度的自有属性都会被删除。这个约束仅适用于数组的自有属性，并不受其原型继承的 &quot;length&quot; 或数组索引属性的影响。</span></span></code></pre></div><ul><li>每个数组对象都有一个 length 属性，其值<code>始终是小于 2^32 的非负整数</code></li></ul><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><ul><li><a href="https://262.ecma-international.org/14.0/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-ecmascript-language-types-string-type</a></li><li><a href="https://www.mulingyuer.com/archives/838/" target="_blank" rel="noreferrer">https://www.mulingyuer.com/archives/838/</a></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>The String type is the set of all ordered sequences of zero or more 16-bit unsigned integer values (“elements”) up to a maximum length of 2^53 - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with non-negative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive interval from 0xD800 to 0xDBFF (defined by the Unicode Standard as a leading surrogate, or more formally as a high-surrogate code unit) and every code unit with a numeric value in the inclusive interval from 0xDC00 to 0xDFFF (defined as a trailing surrogate, or more formally as a low-surrogate code unit) using the following rules:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>字符串类型是由零个或多个 16 位无符号整数值（&quot;元素&quot;）组成的有序序列，最大长度为 2^53 - 1 个元素。字符串类型通常用于表示 ECMAScript 程序中的文本数据，在这种情况下，字符串中的每个元素都被视为一个 UTF-16 代码单元值。每个元素被认为占据序列中的一个位置。这些位置用非负整数进行索引。第一个元素（如果有）的索引为 0，下一个元素（如果有）的索引为 1，依此类推。字符串的长度是其中的元素（即 16 位值）的数量。空字符串的长度为零，因此不包含任何元素。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>不解释字符串内容的 ECMAScript 操作不应用进一步的语义。解释字符串值的操作将每个元素视为单个 UTF-16 代码单元。然而，ECMAScript 不限制这些代码单元的值或关系，因此进一步将字符串内容解释为以 UTF-16 编码的 Unicode 代码点序列的操作必须考虑到不正确的子序列。这样的操作对于每个数值在从 0xD800 到 0xDBFF（由 Unicode 标准定义为前导代理或更正式地定义为高代理代码单元）的闭区间内以及每个数值在从 0xDC00 到 0xDFFF（定义为尾随代理或更正式地定义为低代理代码单元）的闭区间内的每个代码单元应用特殊处理，使用以下规则：</span></span></code></pre></div><ul><li><code>最大长度为 2^53 - 1</code></li></ul><h2 id="ecmascript-es-目录总结" tabindex="-1">Ecmascript ES 目录总结 <a class="header-anchor" href="#ecmascript-es-目录总结" aria-label="Permalink to &quot;Ecmascript ES 目录总结&quot;">​</a></h2><h2 id="ecmascript-data-types-and-values" tabindex="-1">ECMAScript Data Types and Values <a class="header-anchor" href="#ecmascript-data-types-and-values" aria-label="Permalink to &quot;ECMAScript Data Types and Values&quot;">​</a></h2><h3 id="ecmascript-language-types" tabindex="-1">ECMAScript Language Types <a class="header-anchor" href="#ecmascript-language-types" aria-label="Permalink to &quot;ECMAScript Language Types&quot;">​</a></h3><ul><li>定义了 ECMAScript 语言类型:可以直接操作的类型值</li></ul><table tabindex="0"><thead><tr><th>类型</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>Undefined</td><td>未定义类型</td><td>变量声明了但未赋值时的类型</td></tr><tr><td>Null</td><td>空值类型</td><td>表示无值或空值</td></tr><tr><td>Boolean</td><td>布尔类型</td><td>只有两个值：<code>true</code> 和 <code>false</code></td></tr><tr><td>String</td><td>字符串类型</td><td>用于表示文本数据</td></tr><tr><td>Symbol</td><td>符号类型</td><td>表示唯一的、不可变的原始值</td></tr><tr><td>Number</td><td>数字类型</td><td>双精度 64 位浮点数，用于表示整数和浮点数</td></tr><tr><td>BigInt</td><td>大整数类型</td><td>用于表示任意精度的整数</td></tr><tr><td>Object</td><td>对象类型</td><td>用于表示复杂的数据结构，如数组、函数、日期等</td></tr></tbody></table><h3 id="ecmascript-specification-types" tabindex="-1">ECMAScript Specification Types <a class="header-anchor" href="#ecmascript-specification-types" aria-label="Permalink to &quot;ECMAScript Specification Types&quot;">​</a></h3><ul><li><p>定义了 ECMAScript 规范类型: 不能操作的 描述语言的语义和行为的</p></li><li><p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include Reference, List, Completion Record, Property Descriptor, Environment Record, Abstract Closure, and Data Block. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p></li><li><p>规范类型对应于算法中使用的元值，用于描述 ECMAScript 语言构造和 ECMAScript 语言类型的语义。规范类型包括引用、列表、完成记录、属性描述符、环境记录、抽象闭包和数据块。规范类型值是规范工件，不一定对应于 ECMAScript 实现中的任何特定实体。规范类型值可用于描述 ECMAScript 表达式求值的中间结果，但此类值不能存储为对象的属性或 ECMAScript 语言变量的值。</p></li></ul><table tabindex="0"><thead><tr><th>规范类型</th><th>描述</th><th>用途</th></tr></thead><tbody><tr><td>Enum Specification Type</td><td>枚举类型</td><td>用于表示一组有限的命名常量值</td></tr><tr><td>List and Record Specification Types</td><td>列表和记录类型</td><td>用于表示一组有序的值和一组键值对</td></tr><tr><td>Set and Relation Specification Types</td><td>集合和关系类型</td><td>用于表示一组无序的唯一值和一组有序的键值对</td></tr><tr><td>Completion Record Specification Type</td><td>完成记录类型</td><td>用于表示语句或表达式的执行结果</td></tr><tr><td>Reference Record Specification Type</td><td>引用记录类型</td><td>用于表示对变量或属性的引用</td></tr><tr><td>Property Descriptor Specification Type</td><td>属性描述符类型</td><td>用于表示对象属性的特性和行为</td></tr><tr><td>Environment Record Specification Type</td><td>环境记录类型</td><td>用于表示变量和函数的作用域和绑定关系</td></tr><tr><td>Abstract Closure Specification Type</td><td>抽象闭包类型</td><td>用于表示函数的内部状态和执行上下文</td></tr><tr><td>Data Blocks</td><td>数据块类型</td><td>用于表示二进制数据的缓冲区</td></tr><tr><td>PrivateElement Specification Type</td><td>私有元素类型</td><td>用于表示类中的私有成员</td></tr><tr><td>ClassFieldDefinition Record Specification Type</td><td>类字段定义记录类型</td><td>用于表示类中的字段定义</td></tr><tr><td>Private Names</td><td>私有名称类型</td><td>用于表示类中的私有成员名称</td></tr><tr><td>ClassStaticBlockDefinition Record Specification Type</td><td>类静态块定义记录类型</td><td>用于表示类中的静态块定义</td></tr></tbody></table><h2 id="抽象操作-abstract-operations" tabindex="-1">抽象操作 (Abstract Operations ) <a class="header-anchor" href="#抽象操作-abstract-operations" aria-label="Permalink to &quot;抽象操作 (Abstract Operations )&quot;">​</a></h2><ul><li>描述语言的底层行为和算法； 包括类型转换，测试和比较的操作，对象的操作定义</li></ul><h3 id="type-conversion-类型转换" tabindex="-1">Type Conversion (类型转换) <a class="header-anchor" href="#type-conversion-类型转换" aria-label="Permalink to &quot;Type Conversion (类型转换)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Type Conversion</th><th></th></tr></thead><tbody><tr><td>ToPrimitive ( input [ , preferredType ] )</td><td>将输入值转换为原始值。</td></tr><tr><td>OrdinaryToPrimitive ( O, hint )</td><td>将普通对象转换为原始值。</td></tr><tr><td>ToBoolean ( argument )</td><td>将值转换为布尔值。</td></tr><tr><td>ToNumeric ( value )</td><td>将值转换为数值。</td></tr><tr><td>ToNumber ( argument )</td><td>将值转换为数字。</td></tr><tr><td>ToIntegerOrInfinity ( argument )</td><td>将值转换为整数或无穷大。</td></tr><tr><td>ToInt32 ( argument )</td><td>将值转换为 32 位有符号整数。</td></tr><tr><td>ToUint32 ( argument )</td><td>将值转换为 32 位无符号整数。</td></tr><tr><td>ToInt16 ( argument )</td><td>将值转换为 16 位有符号整数。</td></tr><tr><td>ToUint16 ( argument )</td><td>将值转换为 16 位无符号整数。</td></tr><tr><td>ToInt8 ( argument )</td><td>将值转换为 8 位有符号整数。</td></tr><tr><td>ToUint8 ( argument )</td><td>将值转换为 8 位无符号整数。</td></tr><tr><td>ToUint8Clamp ( argument )</td><td>将值转换为 8 位无符号整数（使用截断方式）。</td></tr><tr><td>ToBigInt ( argument )</td><td>将值转换为 BigInt 类型。</td></tr><tr><td>StringToBigInt ( str )</td><td>将字符串转换为 BigInt 类型。</td></tr><tr><td>ToBigInt64 ( argument )</td><td>将值转换为 64 位有符号 BigInt。</td></tr><tr><td>ToBigUint64 ( argument )</td><td>将值转换为 64 位无符号 BigInt。</td></tr><tr><td>ToString ( argument )</td><td>将值转换为字符串。</td></tr><tr><td>ToObject ( argument )</td><td>将值转换为对象。</td></tr><tr><td>ToPropertyKey ( argument )</td><td>将值转换为属性键。</td></tr><tr><td>ToLength ( argument )</td><td>将值转换为长度值。</td></tr><tr><td>CanonicalNumericIndexString ( argument )</td><td>将值转换为规范化的数值索引字符串。</td></tr><tr><td>ToIndex ( value )</td><td>将值转换为索引值。</td></tr></tbody></table><h3 id="testing-and-comparison-operations-测试和比较操作" tabindex="-1">Testing and Comparison Operations (测试和比较操作) <a class="header-anchor" href="#testing-and-comparison-operations-测试和比较操作" aria-label="Permalink to &quot;Testing and Comparison Operations (测试和比较操作)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Testing and Comparison Operations</th><th></th></tr></thead><tbody><tr><td>RequireObjectCoercible ( argument )</td><td>检查参数是否为对象，如果不是则抛出 TypeError 异常。</td></tr><tr><td>IsArray ( argument )</td><td>检查参数是否为数组。</td></tr><tr><td>IsCallable ( argument )</td><td>检查参数是否为可调用对象。</td></tr><tr><td>IsConstructor ( argument )</td><td>检查参数是否为构造函数。</td></tr><tr><td>IsExtensible ( O )</td><td>检查对象是否可扩展。</td></tr><tr><td>IsIntegralNumber ( argument )</td><td>检查参数是否为整数。</td></tr><tr><td>IsPropertyKey ( argument )</td><td>检查参数是否为属性键。</td></tr><tr><td>IsRegExp ( argument )</td><td>检查参数是否为正则表达式对象。</td></tr><tr><td>SS: IsStringWellFormedUnicode ( string )</td><td>检查字符串是否为合法的 Unicode 字符串。</td></tr><tr><td>SameValue ( x, y )</td><td>比较两个值是否相等，包括 NaN 和+0/-0。</td></tr><tr><td>SameValueZero ( x, y )</td><td>比较两个值是否相等，不包括 NaN 和+0/-0。</td></tr><tr><td>SameValueNonNumber ( x, y )</td><td>比较两个非数字类型的值是否相等。</td></tr><tr><td>IsLessThan ( x, y, LeftFirst )</td><td>比较两个值的大小关系。</td></tr><tr><td>IsLooselyEqual ( x, y )</td><td>比较两个值是否宽松相等。</td></tr><tr><td>IsStrictlyEqual ( x, y )</td><td>比较两个值是否严格相等。</td></tr></tbody></table><h3 id="operations-on-objects-操作对象" tabindex="-1">Operations on Objects (操作对象) <a class="header-anchor" href="#operations-on-objects-操作对象" aria-label="Permalink to &quot;Operations on Objects (操作对象)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Operations on Objects</th><th></th></tr></thead><tbody><tr><td>Operations on Iterator Objects</td><td></td></tr></tbody></table><h2 id="可执行代码和执行上下文-executable-code-and-execution-contexts" tabindex="-1">可执行代码和执行上下文 (Executable Code and Execution Contexts) <a class="header-anchor" href="#可执行代码和执行上下文-executable-code-and-execution-contexts" aria-label="Permalink to &quot;可执行代码和执行上下文 (Executable Code and Execution Contexts)&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>    可执行代码是指ECMAScript代码中可以被执行的部分，包括函数、模块、脚本等。执行上下文是指ECMAScript代码执行时的环境，包括变量、函数、this值等。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    在ECMAScript中，每个可执行代码都有一个相关联的执行上下文。执行上下文包括以下几个部分：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    变量环境：用于存储变量和函数声明。</span></span>
<span class="line"><span>    词法环境：用于存储变量和函数的词法绑定。</span></span>
<span class="line"><span>    this值：用于存储当前函数的this值。</span></span>
<span class="line"><span>    可执行代码：用于存储当前执行的可执行代码。</span></span>
<span class="line"><span>    外部环境：用于存储当前执行上下文的外部环境。</span></span></code></pre></div><h2 id="普通对象和异类对象行为-ordinary-and-exotic-objects-behaviours" tabindex="-1">普通对象和异类对象行为 (Ordinary and Exotic Objects Behaviours) <a class="header-anchor" href="#普通对象和异类对象行为-ordinary-and-exotic-objects-behaviours" aria-label="Permalink to &quot;普通对象和异类对象行为 (Ordinary and Exotic Objects Behaviours)&quot;">​</a></h2><ul><li>普通对象和异类对象在 ECMAScript 中有以下区别：</li><li><code>行为</code>：普通对象的行为由 ECMAScript 规范中的基本行为定义，而异类对象的行为由 ECMAScript 规范中的异类对象行为定义。</li><li><code>内部属性</code>：普通对象的内部属性由 ECMAScript 规范中的基本内部方法定义，而异类对象的内部属性由 ECMAScript 规范中的异类对象内部方法定义。</li><li><code>扩展性</code>：普通对象默认是可扩展的，而异类对象默认是不可扩展的。</li><li><code>原型</code>：普通对象的原型是 Object.prototype，而异类对象的原型可以是任何对象。</li><li><code>构造函数</code>：普通对象的构造函数是 Object，而异类对象的构造函数可以是任何函数。</li><li><code>实例化</code>：普通对象可以通过字面量、构造函数、Object.create()等方式实例化，而异类对象只能通过构造函数实例化。</li></ul><table tabindex="0"><thead><tr><th>异类对象类型</th><th>描述</th></tr></thead><tbody><tr><td>Bound Function Exotic Objects</td><td>绑定函数对象，用于绑定函数的 this 值和参数。</td></tr><tr><td>Array Exotic Objects</td><td>数组对象，用于存储一组有序的值。</td></tr><tr><td>String Exotic Objects</td><td>字符串对象，用于存储字符串值。</td></tr><tr><td>Arguments Exotic Objects</td><td>参数对象，用于存储函数的参数。</td></tr><tr><td>Integer-Indexed Exotic Objects</td><td>整数索引对象，用于存储一组有序的值，并支持整数索引访问。</td></tr><tr><td>Module Namespace Exotic Objects</td><td>模块命名空间对象，用于表示模块的命名空间。</td></tr><tr><td>Immutable Prototype Exotic Objects</td><td>不可变原型对象，用于表示不可变的原型对象。</td></tr></tbody></table><h2 id="语言表达式-expressions" tabindex="-1">语言表达式 (Expressions) <a class="header-anchor" href="#语言表达式-expressions" aria-label="Permalink to &quot;语言表达式 (Expressions)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>表达式类型</th><th>描述</th></tr></thead><tbody><tr><td>标识符（Identifiers）</td><td>用于表示变量、函数或对象的名称。</td></tr><tr><td>主表达式（Primary Expression）</td><td>包括字面量、标识符、括号表达式等。</td></tr><tr><td>左手表达式（Left-Hand-Side Expressions）</td><td>用于赋值操作的表达式，包括标识符、属性访问、数组索引等。</td></tr><tr><td>更新表达式（Update Expressions）</td><td>用于增加或减少变量值的表达式，包括前缀和后缀递增递减运算符。</td></tr><tr><td>一元运算符（Unary Operators）</td><td>对单个操作数进行操作的运算符，如取反、递增递减、类型转换等。</td></tr><tr><td>指数运算符（Exponentiation Operator）</td><td>用于计算指数的运算符。</td></tr><tr><td>乘法运算符（Multiplicative Operators）</td><td>用于执行乘法、除法和取模运算的运算符。</td></tr><tr><td>加法运算符（Additive Operators）</td><td>用于执行加法和减法运算的运算符。</td></tr><tr><td>位移运算符（Bitwise Shift Operators）</td><td>用于执行二进制位移操作的运算符。</td></tr><tr><td>关系运算符（Relational Operators）</td><td>用于比较两个值的大小关系的运算符。</td></tr><tr><td>相等运算符（Equality Operators）</td><td>用于比较两个值是否相等的运算符。</td></tr><tr><td>二进制位运算符（Binary Bitwise Operators）</td><td>用于执行二进制位运算的运算符，如按位与、按位或等。</td></tr><tr><td>二进制逻辑运算符（Binary Logical Operators）</td><td>用于执行二进制逻辑运算的运算符，如逻辑与、逻辑或等。</td></tr><tr><td>条件运算符（Conditional Operator）</td><td>也称为三元运算符，根据条件的真假选择不同的值或表达式。</td></tr><tr><td>赋值运算符（Assignment Operators）</td><td>用于将值赋给变量或对象属性的运算符。</td></tr><tr><td>逗号运算符（Comma Operator）</td><td>用于在表达式中多个表达式之间进行分隔的运算符。</td></tr></tbody></table><h3 id="左手表达式" tabindex="-1">左手表达式 <a class="header-anchor" href="#左手表达式" aria-label="Permalink to &quot;左手表达式&quot;">​</a></h3><table tabindex="0"><thead><tr><th>章节</th><th>描述</th></tr></thead><tbody><tr><td>静态语义（Static Semantics）</td><td>描述左手表达式的静态语义规则。</td></tr><tr><td>属性访问器（Property Accessors）</td><td>描述通过点运算符和方括号运算符进行属性访问的语法和行为。</td></tr><tr><td>使用表达式键进行属性访问的求值过程（EvaluatePropertyAccessWithExpressionKey）</td><td>描述使用表达式作为属性键进行属性访问的求值过程。</td></tr><tr><td>使用标识符键进行属性访问的求值过程（EvaluatePropertyAccessWithIdentifierKey）</td><td>描述使用标识符作为属性键进行属性访问的求值过程。</td></tr><tr><td>new 运算符（The new Operator）</td><td>描述使用 new 运算符创建对象实例的语法和行为。</td></tr><tr><td>函数调用（Function Calls）</td><td>描述函数调用的语法和行为，包括参数传递和执行函数体。</td></tr><tr><td>super 关键字（The super Keyword）</td><td>描述 super 关键字在继承关系中的使用和语义。</td></tr><tr><td>参数列表（Argument Lists）</td><td>描述函数调用中的参数列表的语法和行为。</td></tr><tr><td>可选链（Optional Chains）</td><td>描述可选链操作符的语法和行为，用于安全地访问可能为 null 或 undefined 的属性。</td></tr><tr><td>import 调用（Import Calls）</td><td>描述使用 import 语法进行模块导入的语法和行为。</td></tr><tr><td>标记模板（Tagged Templates）</td><td>描述标记模板字符串的语法和行为，用于自定义模板字符串的处理方式。</td></tr><tr><td>元属性（Meta Properties）</td><td>描述元属性的语法和行为，用于访问特定的元数据信息。</td></tr></tbody></table><h2 id="定义-new-关键有哪些操作" tabindex="-1">定义 new 关键有哪些操作 <a class="header-anchor" href="#定义-new-关键有哪些操作" aria-label="Permalink to &quot;定义 new 关键有哪些操作&quot;">​</a></h2><ul><li><a href="https://262.ecma-international.org/14.0/#sec-new-operator" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-new-operator</a></li></ul><h2 id="定义-this-指向" tabindex="-1">定义 this 指向 <a class="header-anchor" href="#定义-this-指向" aria-label="Permalink to &quot;定义 this 指向&quot;">​</a></h2><ul><li><a href="https://262.ecma-international.org/14.0/#sec-this-keyword" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-this-keyword</a></li></ul><h2 id="语句和声明-statements-and-declarations" tabindex="-1">语句和声明 (Statements and Declarations) <a class="header-anchor" href="#语句和声明-statements-and-declarations" aria-label="Permalink to &quot;语句和声明 (Statements and Declarations)&quot;">​</a></h2><table tabindex="0"><thead><tr><th>章节</th><th>描述</th></tr></thead><tbody><tr><td>语句语义（Statement Semantics）</td><td>描述语句的语义和执行顺序。</td></tr><tr><td>块语句（Block）</td><td>描述用花括号括起来的一组语句的语法和行为。</td></tr><tr><td>声明和变量声明语句（Declarations and the Variable Statement）</td><td>描述变量和函数声明的语法和行为。</td></tr><tr><td>空语句（Empty Statement）</td><td>描述一个空语句的语法和行为。</td></tr><tr><td>表达式语句（Expression Statement）</td><td>描述将表达式作为语句的语法和行为。</td></tr><tr><td>if 语句（The if Statement）</td><td>描述条件语句的语法和行为，用于根据条件执行不同的代码块。</td></tr><tr><td>迭代语句（Iteration Statements）</td><td>描述循环语句的语法和行为，如 for 循环、while 循环等。</td></tr><tr><td>continue 语句（The continue Statement）</td><td>描述 continue 语句的语法和行为，用于跳过当前循环的剩余部分。</td></tr><tr><td>break 语句（The break Statement）</td><td>描述 break 语句的语法和行为，用于跳出当前循环或 switch 语句。</td></tr><tr><td>return 语句（The return Statement）</td><td>描述 return 语句的语法和行为，用于从函数中返回一个值。</td></tr><tr><td>with 语句（The with Statement）</td><td>描述 with 语句的语法和行为，用于创建一个临时的作用域链。</td></tr><tr><td>switch 语句（The switch Statement）</td><td>描述 switch 语句的语法和行为，用于根据不同的条件执行不同的代码块。</td></tr><tr><td>标记语句（Labelled Statements）</td><td>描述标记语句的语法和行为，用于在代码中创建标记以供其他语句引用。</td></tr><tr><td>throw 语句（The throw Statement）</td><td>描述 throw 语句的语法和行为，用于抛出一个异常。</td></tr><tr><td>try 语句（The try Statement）</td><td>描述 try 语句的语法和行为，用于捕获和处理异常。</td></tr><tr><td>debugger 语句（The debugger Statement）</td><td>描述 debugger 语句的语法和行为，用于在代码中设置断点。</td></tr></tbody></table><h2 id="函数和类-functions-and-classes" tabindex="-1">函数和类 (Functions and Classes ) <a class="header-anchor" href="#函数和类-functions-and-classes" aria-label="Permalink to &quot;函数和类 (Functions and Classes )&quot;">​</a></h2><table tabindex="0"><thead><tr><th>章节</th><th>描述</th></tr></thead><tbody><tr><td>参数列表（Parameter Lists）</td><td>描述函数或方法定义中的参数列表的语法和行为。</td></tr><tr><td>函数定义（Function Definitions）</td><td>描述使用 function 关键字定义函数的语法和行为。</td></tr><tr><td>箭头函数定义（Arrow Function Definitions）</td><td>描述使用箭头函数语法定义函数的语法和行为。</td></tr><tr><td>方法定义（Method Definitions）</td><td>描述在对象或类中定义方法的语法和行为。</td></tr><tr><td>生成器函数定义（Generator Function Definitions）</td><td>描述使用 function 关键字定义生成器函数的语法和行为。</td></tr><tr><td>异步生成器函数定义（Async Generator Function Definitions）</td><td>描述使用 async 关键字定义异步生成器函数的语法和行为。</td></tr><tr><td>类定义（Class Definitions）</td><td>描述使用 class 关键字定义类的语法和行为。</td></tr><tr><td>异步函数定义（Async Function Definitions）</td><td>描述使用 async 关键字定义异步函数的语法和行为。</td></tr><tr><td>异步箭头函数定义（Async Arrow Function Definitions）</td><td>描述使用箭头函数语法定义异步函数的语法和行为。</td></tr><tr><td>尾部位置调用（Tail Position Calls）</td><td>描述尾部位置调用的语法和行为，用于优化递归函数的性能。</td></tr></tbody></table><h2 id="结构化数据-structured-data" tabindex="-1">结构化数据 (Structured Data ) <a class="header-anchor" href="#结构化数据-structured-data" aria-label="Permalink to &quot;结构化数据 (Structured Data )&quot;">​</a></h2><table tabindex="0"><thead><tr><th>章节</th><th>描述</th></tr></thead><tbody><tr><td>JSON 对象（The JSON Object）</td><td>描述了 ECMAScript 语言中的 JSON 对象和 JSON 字符串的解析和序列化。</td></tr><tr><td>ArrayBuffer 对象（The ArrayBuffer Object）</td><td>描述了 ECMAScript 语言中的 ArrayBuffer 对象和二进制数据的处理。</td></tr><tr><td>DataView 对象（The DataView Object）</td><td>描述了 ECMAScript 语言中的 DataView 对象和二进制数据的读写操作。</td></tr><tr><td>TypedArray 对象（The TypedArray Objects）</td><td>描述了 ECMAScript 语言中的 TypedArray 对象和基于 ArrayBuffer 的类型化数组。</td></tr><tr><td>SharedArrayBuffer 对象（The SharedArrayBuffer Object）</td><td>描述了 ECMAScript 语言中的 SharedArrayBuffer 对象和多线程共享内存的处理。</td></tr><tr><td>Atomics 对象（The Atomics Object）</td><td>描述了 ECMAScript 语言中的 Atomics 对象和原子操作的处理。</td></tr></tbody></table><h2 id="控制抽象对象-control-abstraction-objects" tabindex="-1">控制抽象对象 (Control Abstraction Objects ) <a class="header-anchor" href="#控制抽象对象-control-abstraction-objects" aria-label="Permalink to &quot;控制抽象对象 (Control Abstraction Objects )&quot;">​</a></h2><table tabindex="0"><thead><tr><th>章节</th><th>描述</th></tr></thead><tbody><tr><td>迭代器协议（The Iterator Protocol）</td><td>描述了 ECMAScript 语言中的迭代器协议和可迭代对象的处理。</td></tr><tr><td>Promise 对象（Promise Objects）</td><td>描述了 ECMAScript 语言中的 Promise 对象和异步编程的处理。</td></tr><tr><td>GeneratorFunction 对象（GeneratorFunction Objects）</td><td>描述了 ECMAScript 语言中的 GeneratorFunction 对象和生成器函数的处理。</td></tr><tr><td>AsyncGeneratorFunction 对象（AsyncGeneratorFunction Objects）</td><td>描述了 ECMAScript 语言中的 AsyncGeneratorFunction 对象和异步生成器函数的处理。</td></tr><tr><td>Generator 对象（Generator Objects）</td><td>描述了 ECMAScript 语言中的 Generator 对象和生成器的处理。</td></tr><tr><td>AsyncGenerator 对象（AsyncGenerator Objects）</td><td>描述了 ECMAScript 语言中的 AsyncGenerator 对象和异步生成器的处理。</td></tr><tr><td>AsyncFunction 对象（AsyncFunction Objects）</td><td>描述了 ECMAScript 语言中的 AsyncFunction 对象和异步函数的处理。</td></tr></tbody></table><h2 id="重点文章" tabindex="-1">重点文章 <a class="header-anchor" href="#重点文章" aria-label="Permalink to &quot;重点文章&quot;">​</a></h2><ul><li><a href="https://262.ecma-international.org/14.0/#sec-syntax-directed-operations" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-syntax-directed-operations</a></li><li><a href="https://262.ecma-international.org/14.0/#sec-executable-code-and-execution-contexts" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-executable-code-and-execution-contexts</a></li><li><a href="https://262.ecma-international.org/14.0/#sec-ordinary-and-exotic-objects-behaviours" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-ordinary-and-exotic-objects-behaviours</a></li><li><a href="https://262.ecma-international.org/14.0/#sec-arguments-exotic-objects" target="_blank" rel="noreferrer">https://262.ecma-international.org/14.0/#sec-arguments-exotic-objects</a></li></ul>`,48),i=[n];function s(o,c,l,p,h,u){return r(),e("div",null,i)}const y=t(d,[["render",s]]);export{m as __pageData,y as default};
