import{_ as t,c as d,o as e,a3 as o}from"./chunks/framework.z7kdJ_yr.js";const u=JSON.parse('{"title":"AST 节点概念","description":"","frontmatter":{},"headers":[],"relativePath":"MiscellaneousTalk/P1 概念系列/7.AST节点概念.md","filePath":"MiscellaneousTalk/P1 概念系列/7.AST节点概念.md"}'),r={name:"MiscellaneousTalk/P1 概念系列/7.AST节点概念.md"},a=o('<h1 id="ast-节点概念" tabindex="-1">AST 节点概念 <a class="header-anchor" href="#ast-节点概念" aria-label="Permalink to &quot;AST 节点概念&quot;">​</a></h1><h2 id="literal-字面量类" tabindex="-1">Literal 字面量类 <a class="header-anchor" href="#literal-字面量类" aria-label="Permalink to &quot;Literal 字面量类&quot;">​</a></h2><table tabindex="0"><thead><tr><th>字面量类型</th><th>描述</th><th>示例代码</th></tr></thead><tbody><tr><td>StringLiteral</td><td>表示字符串字面量</td><td><code>&#39;Hello, World!&#39;</code></td></tr><tr><td>NumericLiteral</td><td>表示数字字面量，包括整数和浮点数</td><td><code>42</code>, <code>3.14</code></td></tr><tr><td>BigIntLiteral</td><td>表示大整数字面量（ES2020 引入）</td><td><code>123n</code></td></tr><tr><td>BooleanLiteral</td><td>表示布尔值字面量</td><td><code>true</code>, <code>false</code></td></tr><tr><td>NullLiteral</td><td>表示 <code>null</code> 值</td><td><code>null</code></td></tr><tr><td>RegExpLiteral</td><td>表示正则表达式字面量</td><td><code>/pattern/flags</code></td></tr></tbody></table><p>注意：在 JavaScript AST 的不同实现中，例如 Babel，可能会将这些字面量表示为单独的节点类型，而非统一归类于一个<code>Literal</code>节点。但在 ESTree 规范等某些标准中，它们通常都被视为<code>Literal</code>类型的子类。</p><h2 id="identifier-标志符类" tabindex="-1">Identifier 标志符类 <a class="header-anchor" href="#identifier-标志符类" aria-label="Permalink to &quot;Identifier 标志符类&quot;">​</a></h2><ul><li>Identifier 节点出现在多种上下文中，如变量声明、函数名、对象或数组解构的键、导入导出语句中的模块名等。它代表了程序中具有唯一性的名字，但在实际运行时，其关联的具体值取决于上下文</li></ul><h2 id="statement-语句类" tabindex="-1">Statement 语句类 <a class="header-anchor" href="#statement-语句类" aria-label="Permalink to &quot;Statement 语句类&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型（Type）</th><th>描述</th><th>示例代码</th></tr></thead><tbody><tr><td>ExpressionStatement</td><td>包含一个表达式的语句，如变量赋值、函数调用等</td><td><code>let a = 1;</code></td></tr><tr><td>BlockStatement</td><td>由花括号 <code>{}</code> 包围的代码块，内部可以包含多个语句</td><td><code>{ let a = 1; console.log(a); }</code></td></tr><tr><td>EmptyStatement</td><td>空语句，仅用于占位符或语法结构需要的地方</td><td><code>;</code></td></tr><tr><td>DebuggerStatement</td><td>调试语句，暂停执行并启动调试器</td><td><code>debugger;</code></td></tr><tr><td>WithStatement</td><td>已废弃，在严格模式下无效，提供一个作用域链，使代码在特定对象的作用域中执行</td><td><code>with (obj) { a = b + c; }</code></td></tr><tr><td>ReturnStatement</td><td>函数中的返回语句，带可选的返回值</td><td><code>return value;</code></td></tr><tr><td>BreakStatement</td><td>中断循环或 switch 语句的执行</td><td><code>break labelName;</code> 或 <code>break;</code></td></tr><tr><td>ContinueStatement</td><td>继续下一次循环迭代</td><td><code>continue labelName;</code> 或 <code>continue;</code></td></tr><tr><td>LabeledStatement</td><td>标签语句，为循环或 switch 提供可命名的目标，以便于 break 和 continue 使用</td><td><code>label: for (;;) { break label; }</code></td></tr><tr><td>IfStatement</td><td>条件语句，根据条件执行不同的代码块</td><td><code>if (condition) { ... } else { ... }</code></td></tr><tr><td>SwitchStatement</td><td>多分支选择语句，基于表达式的结果匹配多个 case 选项</td><td><code>switch (expression) { case value: ... }</code></td></tr><tr><td>ThrowStatement</td><td>抛出异常语句，中断程序执行并抛出指定错误对象</td><td><code>throw exception;</code></td></tr><tr><td>TryStatement</td><td>尝试/捕获/最终语句，用于处理可能发生的错误</td><td><code>try { ... } catch (e) { ... } finally { ... }</code></td></tr><tr><td>WhileStatement</td><td>当给定的条件为真时，重复执行一个代码块</td><td><code>while (condition) { ... }</code></td></tr><tr><td>DoWhileStatement</td><td>先执行一次循环体，然后检查条件是否为真，若为真则继续执行</td><td><code>do { ... } while (condition);</code></td></tr><tr><td>ForStatement</td><td>传统的 for 循环，包含初始化、条件判断和更新部分</td><td><code>for (init; condition; update) { ... }</code></td></tr><tr><td>ForInStatement / ForOfStatement</td><td>遍历数组、对象或其他可迭代对象的所有属性或元素的循环语句</td><td><code>for (let key in obj) {...}</code> 或 <code>for await (let item of iterable) {...}</code></td></tr></tbody></table><h2 id="declaration-声明类" tabindex="-1">Declaration 声明类 <a class="header-anchor" href="#declaration-声明类" aria-label="Permalink to &quot;Declaration 声明类&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型（Type）</th><th>描述</th><th>示例代码</th></tr></thead><tbody><tr><td>VariableDeclaration</td><td>变量声明，包括 <code>var</code>、<code>let</code> 和 <code>const</code>关键字。</td><td><code>let a = 1;</code> 或 <code>const b = &quot;Hello&quot;;</code></td></tr><tr><td>FunctionDeclaration</td><td>函数声明，定义一个全局或局部作用域的函数。</td><td><code>function myFunction() {...}</code></td></tr><tr><td>ClassDeclaration</td><td>类声明，定义一个新的类。</td><td><code>class MyClass { ... }</code></td></tr><tr><td>ImportDeclaration</td><td>ES6 模块导入声明，用于引入其他模块的变量或导出项。</td><td><code>import { myModule } from &#39;./myModule.js&#39;;</code></td></tr><tr><td>ExportNamedDeclaration</td><td>ES6 模块命名导出声明，导出单个或多个标识符到外部模块。</td><td><code>export const myExportedVar = 42;</code></td></tr><tr><td>ExportDefaultDeclaration</td><td>ES6 模块默认导出声明，用于导出一个默认函数、类或对象。</td><td></td></tr></tbody></table><h2 id="expression-表达式类" tabindex="-1">Expression 表达式类 <a class="header-anchor" href="#expression-表达式类" aria-label="Permalink to &quot;Expression 表达式类&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型（Type）</th><th>描述</th><th>示例代码</th></tr></thead><tbody><tr><td>Identifier</td><td>标识符表达式，表示一个变量、函数名或对象属性的名称。</td><td><code>myVariable</code>, <code>myFunction()</code>, <code>object.property</code></td></tr><tr><td>Literal</td><td>字面量表达式，包括字符串、数字、布尔值、null、undefined 和正则表达式的字面表示形式。</td><td><code>&#39;Hello&#39;</code>, <code>42</code>, <code>true</code>, <code>null</code>, <code>/pattern/flags</code></td></tr><tr><td>TemplateLiteral</td><td>模板字符串表达式，用于字符串插值。</td><td><code>${name} says hello!</code></td></tr><tr><td>ArrayExpression</td><td>数组表达式，表示数组字面量。</td><td><code>[1, 2, &#39;three&#39;]</code></td></tr><tr><td>ObjectExpression</td><td>对象表达式，表示对象字面量。</td><td><code>{ a: 1, b: 2, c: &quot;three&quot; }</code></td></tr><tr><td>Property</td><td>对象属性表达式，是 ObjectExpression 的一部分，描述键值对。</td><td><code>a: 1</code> 或 <code>b: { value: 2, kind: &#39;init&#39; }</code></td></tr><tr><td>MemberExpression</td><td>成员表达式，访问对象的属性或调用其方法。</td><td><code>object.property</code> 或 <code>array[0]</code></td></tr><tr><td>CallExpression</td><td>函数调用表达式，用于调用函数或其他可调用对象。</td><td><code>myFunction(arg1, arg2)</code></td></tr><tr><td>NewExpression</td><td>构造函数调用表达式，创建新对象实例。</td><td><code>new MyClass(args)</code></td></tr><tr><td>ArrowFunctionExpression</td><td>箭头函数表达式，定义简洁的匿名函数。</td><td><code>(arg1, arg2) =&gt; arg1 + arg2</code></td></tr><tr><td>FunctionExpression</td><td>函数表达式，定义可以被赋值给变量或作为参数传递的函数。</td><td><code>function myFunc(a, b) { return a + b; }</code></td></tr><tr><td>SequenceExpression</td><td>序列表达式，表示一组按照从左到右顺序执行并返回最后一个表达式结果的表达式序列。</td><td><code>(expr1, expr2, expr3)</code></td></tr><tr><td>UnaryExpression</td><td>单元操作符表达式，包含一元运算符（如<code>-</code>、<code>+</code>、<code>!</code>等）和一个操作数。</td><td><code>-a</code>, <code>typeof b</code></td></tr><tr><td>AssignmentExpression</td><td>赋值表达式，将右侧表达式的结果赋给左侧标识符或成员表达式。</td><td><code>a = b</code>, <code>obj.prop = value</code></td></tr><tr><td>UpdateExpression</td><td>自增/自减操作表达式，递增或递减操作数的值。</td><td><code>a++</code>, <code>--b</code></td></tr><tr><td>ConditionalExpression</td><td>条件（三元）表达式，基于条件计算结果为真或假时返回不同的值。</td><td><code>condition ? trueValue : falseValue</code></td></tr><tr><td>SpreadElement / RestElement</td><td>展开元素表达式，用于在数组或函数参数中展开数组或对象。</td><td><code>[...arr]</code>, <code>function(fizz, ...args) {...}</code></td></tr><tr><td>AwaitExpression</td><td>异步等待表达式，在异步函数中等待 Promise 的结果。</td><td><code>await promise</code></td></tr><tr><td>YieldExpression</td><td>生成器函数中的 yield 表达式，暂停生成器函数的执行并产出一个值。</td><td><code>yield someValue</code></td></tr><tr><td>ThisExpression</td><td>this 关键字表达式，表示当前上下文的对象引用。</td><td><code>this</code></td></tr><tr><td><code>BinaryExpression / LogicalExpression</code></td><td>二元逻辑/算术表达式，包含两个操作数和一个二元运算符（如<code>+、-、*、&amp;&amp;、|| </code>等）</td><td><code>a + b</code>, <code>c &gt; d &amp;&amp; e &lt; f</code></td></tr></tbody></table><h2 id="comment-program" tabindex="-1">Comment &amp; Program <a class="header-anchor" href="#comment-program" aria-label="Permalink to &quot;Comment &amp; Program&quot;">​</a></h2><h3 id="comment-注释类" tabindex="-1">Comment（注释类） <a class="header-anchor" href="#comment-注释类" aria-label="Permalink to &quot;Comment（注释类）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型（Type）</th><th>描述</th><th>示例代码</th></tr></thead><tbody><tr><td>LineComment</td><td>行内注释，以<code>//</code>开始的单行注释。</td><td><code>// This is a line comment.</code></td></tr><tr><td>BlockComment</td><td>块注释，以<code>/*</code>开始并以<code>*/</code>结束的多行注释。</td><td><code>/* This is a block comment. */</code></td></tr></tbody></table><h3 id="program-程序类" tabindex="-1">Program（程序类） <a class="header-anchor" href="#program-程序类" aria-label="Permalink to &quot;Program（程序类）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型（Type）</th><th>描述</th><th>示例代码</th></tr></thead><tbody><tr><td>Program</td><td>整个 JavaScript 源文件或模块的内容。它包含一个或多个声明、表达式或其他语句，并且是 AST 的根节点。</td><td><code>const x = 1; function myFunc() {...};</code></td></tr><tr><td>Directive</td><td>特殊类型的语句，通常出现在脚本或模块顶部的<code>&quot;use strict&quot;</code>等指令。在 AST 中，可能作为 Program 的一部分出现。</td><td><code>&#39;use strict&#39;;</code></td></tr><tr><td>Module</td><td>ES6 模块相关的节点类型，代表整个模块的结构，其中包含导入和导出声明以及顶级定义。</td><td><code>import { foo } from &#39;./module.js&#39;; export default bar;</code></td></tr></tbody></table><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ul><li><a href="https://babel.nodejs.cn/docs/babel-types" target="_blank" rel="noreferrer">https://babel.nodejs.cn/docs/babel-types</a></li></ul>',19),c=[a];function n(i,l,s,h,m,b){return e(),d("div",null,c)}const x=t(r,[["render",n]]);export{u as __pageData,x as default};
