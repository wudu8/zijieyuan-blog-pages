import{_ as a,c as i,o as s,a3 as t}from"./chunks/framework.z7kdJ_yr.js";const g=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewQuestions/P3 八股文/2.CSS.md","filePath":"InterviewQuestions/P3 八股文/2.CSS.md"}'),e={name:"InterviewQuestions/P3 八股文/2.CSS.md"},l=t(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="_1-介绍一下标准的-css-的盒子模型-低版本-ie-的盒子模型有什么不同的" tabindex="-1">1.介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的？ <a class="header-anchor" href="#_1-介绍一下标准的-css-的盒子模型-低版本-ie-的盒子模型有什么不同的" aria-label="Permalink to &quot;1.介绍一下标准的 CSS 的盒子模型？低版本 IE 的盒子模型有什么不同的？&quot;">​</a></h2><ul><li><p><code>是什么</code>：当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型，将所有元素表示为一个个矩形的盒子。一个盒子由四个部分组成：content、padding、border、margin</p></li><li><p><code>标准盒子模型</code>: width/height 只是内容高度，<code>不包含</code> padding 和 border 值</p><ul><li>盒子总宽度 = width + padding + border + margin;</li><li>盒子总高度 = height + padding + border + margin</li></ul></li><li><p><code>IE 怪异盒子模型</code>: width/height <code>包含了</code> padding 和 border 值</p><ul><li>盒子总宽度 = width + margin;</li><li>盒子总高度 = height + margin;</li></ul></li></ul><h2 id="_2-css-选择符有哪些" tabindex="-1">2.CSS 选择符有哪些？ <a class="header-anchor" href="#_2-css-选择符有哪些" aria-label="Permalink to &quot;2.CSS 选择符有哪些？&quot;">​</a></h2><ol><li>id 选择器（#myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div,h1,p）</li><li>后代选择器（h1 p）</li><li>相邻后代选择器（子）选择器（ul&gt;li）</li><li>兄弟选择器（li~a）</li><li>相邻兄弟选择器（li+a）</li><li>属性选择器（a[rel=&quot;external&quot;]）</li><li>伪类选择器（a:hover,li:nth-child）</li><li>伪元素选择器（::before、::after）</li><li>通配符选择器（*）</li></ol><h2 id="_3-before-和-after-中双冒号和单冒号有什么区别-解释一下这-2-个伪元素的作用" tabindex="-1">3.::before 和:after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用 <a class="header-anchor" href="#_3-before-和-after-中双冒号和单冒号有什么区别-解释一下这-2-个伪元素的作用" aria-label="Permalink to &quot;3.::before 和:after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用&quot;">​</a></h2><ul><li>单冒号（:）用于 CSS3 伪类，<code>伪类一般匹配的是元素的一些特殊状态</code>，如 hover、link 等</li><li>双冒号（::）用于 CSS3 伪元素，<code>伪元素一般匹配的特殊的位置</code>，比如 after、before 等</li></ul><h2 id="_4-伪类与伪元素的区别" tabindex="-1">4.伪类与伪元素的区别 <a class="header-anchor" href="#_4-伪类与伪元素的区别" aria-label="Permalink to &quot;4.伪类与伪元素的区别&quot;">​</a></h2><ul><li><a href="https://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/" target="_blank" rel="noreferrer">https://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/</a></li></ul><h2 id="_5-css-中哪些属性可以继承" tabindex="-1">5.CSS 中哪些属性可以继承？ <a class="header-anchor" href="#_5-css-中哪些属性可以继承" aria-label="Permalink to &quot;5.CSS 中哪些属性可以继承？&quot;">​</a></h2><h2 id="_6-css-优先级算法如何计算" tabindex="-1">6.CSS 优先级算法如何计算？ <a class="header-anchor" href="#_6-css-优先级算法如何计算" aria-label="Permalink to &quot;6.CSS 优先级算法如何计算？&quot;">​</a></h2><h2 id="_7-关于伪类-lvha-的解释" tabindex="-1">7.关于伪类 LVHA 的解释? <a class="header-anchor" href="#_7-关于伪类-lvha-的解释" aria-label="Permalink to &quot;7.关于伪类 LVHA 的解释?&quot;">​</a></h2><ul><li>a 标签有四种状态：链接访问前、链接访问后、鼠标滑过、激活，分别对应四种伪 类:link、:visited、:hover、:active；</li><li>（1）当鼠标滑过 a 链接时，满足:link 和:hover 两种状态，要改变 a 标签的颜色，就必须将<code>:hover 伪类在:link 伪类后面声明</code>；</li><li>（2）当鼠标点击激活 a 链接时，同时满足:link、:hover、:active 三种状态，要显示 a 标签激活时的样式（:active），必须<code>将:active 声明放到:link 和:hover 之后</code></li><li>因此得出 LVHA 这个顺序</li></ul><h2 id="_8-css3-新增伪类有那些" tabindex="-1">8.CSS3 新增伪类有那些？ <a class="header-anchor" href="#_8-css3-新增伪类有那些" aria-label="Permalink to &quot;8.CSS3 新增伪类有那些？&quot;">​</a></h2><table tabindex="0"><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>elem:nth-child(n)</code></td><td>选中父元素下的第 n 个子元素（无论标签名），且该子元素的标签名为 elem。n 可以是具体的数值或函数表达式。</td></tr><tr><td><code>elem:nth-last-child(n)</code></td><td>同上，不过是从父元素的最后一个子元素开始向前查找第 n 个匹配的 elem 类型子元素。</td></tr><tr><td><code>elem:last-child</code></td><td>选中父元素下的最后一个子元素，不限定标签名。若这个子元素是 elem 类型，则会被选中。</td></tr><tr><td><code>elem:only-child</code></td><td>如果 elem 是其父元素下唯一的子元素，则选中之，不论元素类型为何。</td></tr><tr><td><code>elem:nth-of-type(n)</code></td><td>选中父元素下第 n 个同类型的 elem 元素，n 可以是具体数值或函数表达式。</td></tr><tr><td><code>elem:first-of-type</code></td><td>选中父元素下第一个同类型的 elem 元素。</td></tr><tr><td><code>elem:last-of-type</code></td><td>选中父元素下最后一个同类型的 elem 元素。</td></tr><tr><td><code>elem:only-of-type</code></td><td>如果父元素下的子元素只有一个同为 elem 类型的元素，则选中该元素。</td></tr><tr><td><code>elem:empty</code></td><td>选中不包含任何子元素（包括文本节点）的 elem 类型元素。</td></tr><tr><td><code>elem:target</code></td><td>选择当前文档 URL 指向的 ID 与 elem 相匹配的元素。</td></tr><tr><td><code>:not(elem)</code></td><td>选择非 elem 元素的所有元素。</td></tr><tr><td><code>:enabled</code></td><td>选中所有启用状态的表单控件元素，不限于特定的 elem 类型。</td></tr><tr><td><code>:disabled</code></td><td>选中所有禁用状态的表单控件元素，同样不限于特定</td></tr></tbody></table><h2 id="_9-如何居中-div" tabindex="-1">9.如何居中 div？ <a class="header-anchor" href="#_9-如何居中-div" aria-label="Permalink to &quot;9.如何居中 div？&quot;">​</a></h2><ul><li>对于宽高固定的元素 <ol><li>我们可以利用 margin:0auto 来实现元素的水平居中。</li><li>利用绝对定位，设置四个方向的值都为 0，并将 margin 设置为 auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。</li><li>利用绝对定位，先将元素的左上角通过 top:50%和 left:50%定位到页面的中心，然后再通过 margin 负值来调整元素的中心点到页面的中心。</li></ol></li><li>宽高不定的元素 <ol><li>利用绝对定位，先将元素的左上角通过 top:50%和 left:50%定位到页面的中心，然后再通过 translate 来调整元素的中心点到页面的中心。</li><li>使用 flex 布局，通过 align-items:center 和 justify-content:center 设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中</li></ol></li></ul><h2 id="_10-display-有哪些值-说明他们的作用。" tabindex="-1">10.display 有哪些值？说明他们的作用。 <a class="header-anchor" href="#_10-display-有哪些值-说明他们的作用。" aria-label="Permalink to &quot;10.display 有哪些值？说明他们的作用。&quot;">​</a></h2><table tabindex="0"><thead><tr><th>display 属性值</th><th>描述</th></tr></thead><tbody><tr><td>block</td><td>块级元素类型，宽度默认为父元素宽度，可设置宽高，换行显示</td></tr><tr><td>none</td><td>元素不显示，并从文档流中移除（不占用空间）</td></tr><tr><td>inline</td><td>行内元素类型，宽度默认适应内容，不可设置宽高，同行显示</td></tr><tr><td>inline-block</td><td>类似行内元素，宽度默认适应内容，但可以设置宽高，同行显示</td></tr><tr><td>list-item</td><td>类似块级元素显示，并带有列表项标记样式，常用于<code>&lt;li&gt;</code>元素</td></tr><tr><td>table</td><td>将元素作为块级表格显示，具有表格布局特性</td></tr><tr><td>inherit</td><td>规定 display 属性应继承其父元素的 display 属性值</td></tr></tbody></table><h2 id="_11-position-的值-relative-和-absolute-定位原点是" tabindex="-1">11.position 的值 relative 和 absolute 定位原点是？ <a class="header-anchor" href="#_11-position-的值-relative-和-absolute-定位原点是" aria-label="Permalink to &quot;11.position 的值 relative 和 absolute 定位原点是？&quot;">​</a></h2><table tabindex="0"><thead><tr><th>position 属性值</th><th>描述</th></tr></thead><tbody><tr><td>absolute</td><td>绝对定位元素，相对于最近的非 <code>static</code> 定位祖先（含 padding）进行定位</td></tr><tr><td>fixed</td><td>绝对定位元素，相对于浏览器窗口进行固定定位</td></tr><tr><td>relative</td><td>相对定位元素，相对于其正常位置进行定位，原元素在文档流中的位置保留</td></tr><tr><td>static</td><td>默认值，无定位，遵循正常的文档流布局</td></tr><tr><td>inherit</td><td>规定从父元素继承 position 属性的值</td></tr></tbody></table><h2 id="_12-css3-有哪些新特性" tabindex="-1">12.CSS3 有哪些新特性？ <a class="header-anchor" href="#_12-css3-有哪些新特性" aria-label="Permalink to &quot;12.CSS3 有哪些新特性？&quot;">​</a></h2><h2 id="_13-请解释一下-css3-的-flexbox-弹性盒布局模型-以及适用场景" tabindex="-1">13.请解释一下 CSS3 的 Flexbox（弹性盒布局模型），以及适用场景？ <a class="header-anchor" href="#_13-请解释一下-css3-的-flexbox-弹性盒布局模型-以及适用场景" aria-label="Permalink to &quot;13.请解释一下 CSS3 的 Flexbox（弹性盒布局模型），以及适用场景？&quot;">​</a></h2><h2 id="_14-用纯-css-创建一个三角形的原理是什么" tabindex="-1">14.用纯 CSS 创建一个三角形的原理是什么？ <a class="header-anchor" href="#_14-用纯-css-创建一个三角形的原理是什么" aria-label="Permalink to &quot;14.用纯 CSS 创建一个三角形的原理是什么？&quot;">​</a></h2><h2 id="_15-一个满屏品字布局如何设计" tabindex="-1">15.一个满屏品字布局如何设计? <a class="header-anchor" href="#_15-一个满屏品字布局如何设计" aria-label="Permalink to &quot;15.一个满屏品字布局如何设计?&quot;">​</a></h2><h2 id="_16-css-多列等高如何实现" tabindex="-1">16.CSS 多列等高如何实现？ <a class="header-anchor" href="#_16-css-多列等高如何实现" aria-label="Permalink to &quot;16.CSS 多列等高如何实现？&quot;">​</a></h2><ol><li>利用 负 margin-bottom 和正 padding-bottom 对冲实现，不会影响页面布局的特点。设置父容器设置超出隐藏（overflow:hidden），这样父容器的高度就还是它里面的列没有设定 padding-bottom 时的高度，当它里面的任一列高度增加了，则父容器的高度被撑到里面最高那列的高度，其他比这列矮的列会用它们的 padding-bottom 补偿这部分高度差。</li><li>利用 table-cell 所有单元格高度都相等的特性，来实现多列等高。</li><li>利用 flex 布局中项目 align-items 属性默认为 stretch，如果项目未设置高度或设为 auto，将占满整个容器的高度的特性，来实现多列等高。</li></ol><h2 id="_17-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用-hack-的技巧" tabindex="-1">17.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用 hack 的技巧？ <a class="header-anchor" href="#_17-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用-hack-的技巧" aria-label="Permalink to &quot;17.经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用 hack 的技巧？&quot;">​</a></h2><h2 id="_18-li-与-li-之间有看不见的空白间隔是什么原因引起的-有什么解决办法" tabindex="-1">18.li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？ <a class="header-anchor" href="#_18-li-与-li-之间有看不见的空白间隔是什么原因引起的-有什么解决办法" aria-label="Permalink to &quot;18.li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？&quot;">​</a></h2><h2 id="_19-为什么要初始化-css-样式" tabindex="-1">19.为什么要初始化 CSS 样式？ <a class="header-anchor" href="#_19-为什么要初始化-css-样式" aria-label="Permalink to &quot;19.为什么要初始化 CSS 样式？&quot;">​</a></h2><ul><li>往往会出现浏览器之间的页面显示差异。</li><li>当然，初始化样式会对 SEO 有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况 下初始化。最简单的初始化方法：<code>\\*{padding:0;margin:0;}</code></li></ul><h2 id="_20-什么是包含块-对于包含块的理解" tabindex="-1">20.什么是包含块，对于包含块的理解? <a class="header-anchor" href="#_20-什么是包含块-对于包含块的理解" aria-label="Permalink to &quot;20.什么是包含块，对于包含块的理解?&quot;">​</a></h2><h2 id="_21-css-里的-visibility-属性有个-collapse-属性值是干嘛用的-在不同浏览器下以后什么区别" tabindex="-1">21.CSS 里的 visibility 属性有个 collapse 属性值是干嘛用的？在不同浏览器下以后什么区别？ <a class="header-anchor" href="#_21-css-里的-visibility-属性有个-collapse-属性值是干嘛用的-在不同浏览器下以后什么区别" aria-label="Permalink to &quot;21.CSS 里的 visibility 属性有个 collapse 属性值是干嘛用的？在不同浏览器下以后什么区别？&quot;">​</a></h2><h2 id="_22-width-auto-和-width-100-的区别" tabindex="-1">22.width:auto 和 width:100%的区别 <a class="header-anchor" href="#_22-width-auto-和-width-100-的区别" aria-label="Permalink to &quot;22.width:auto 和 width:100%的区别&quot;">​</a></h2><ul><li><p>width:100%会使元素 box 的宽度等于父元素的 contentbox 的宽度。</p></li><li><p>width:auto 会使元素撑满整个父元素，margin、border、padding、content 区域会自动分配水平空间</p></li><li><p><a href="https://juejin.cn/post/6894068581854478349" target="_blank" rel="noreferrer">https://juejin.cn/post/6894068581854478349</a></p></li></ul><h2 id="_23-绝对定位元素与非绝对定位元素的百分比计算的区别" tabindex="-1">23.绝对定位元素与非绝对定位元素的百分比计算的区别 <a class="header-anchor" href="#_23-绝对定位元素与非绝对定位元素的百分比计算的区别" aria-label="Permalink to &quot;23.绝对定位元素与非绝对定位元素的百分比计算的区别&quot;">​</a></h2><h2 id="_24-简单介绍使用图片-base64-编码的优点和缺点。" tabindex="-1">24.简单介绍使用图片 base64 编码的优点和缺点。 <a class="header-anchor" href="#_24-简单介绍使用图片-base64-编码的优点和缺点。" aria-label="Permalink to &quot;24.简单介绍使用图片 base64 编码的优点和缺点。&quot;">​</a></h2><ul><li><p>base64 编码是一种图片处理格式，通过特定的算法将图片编码成一长串字符串，在页面上显示的时候，可以用该字符串来代替图片的 url 属性</p></li><li><p>使用 base64 的优点是：</p><ol><li>减少一个图片的 HTTP 请求</li></ol></li><li><p>使用 base64 的缺点是：</p><ol><li>根据 base64 的编码原理，编码后的大小会比原文件大小大 1/3，如果把大图片编码到 html/css 中，不仅会造成文件体积的增加，影响文件的加载速度，还会增加浏览器对 html 或 css 文件解析渲染的时间。</li><li>使用 base64 无法直接缓存，要缓存只能缓存包含 base64 的文件</li><li>兼容性的问题，ie8 以前的浏览器不支持</li></ol></li></ul><h2 id="_25-display-、-position-和-float-的相互关系" tabindex="-1">25.&#39;display&#39;、&#39;position&#39;和&#39;float&#39;的相互关系？ <a class="header-anchor" href="#_25-display-、-position-和-float-的相互关系" aria-label="Permalink to &quot;25.&#39;display&#39;、&#39;position&#39;和&#39;float&#39;的相互关系？&quot;">​</a></h2><h2 id="_26-margin-重叠问题的理解。" tabindex="-1">26.margin 重叠问题的理解。 <a class="header-anchor" href="#_26-margin-重叠问题的理解。" aria-label="Permalink to &quot;26.margin 重叠问题的理解。&quot;">​</a></h2><ul><li>块级元素的上外边距（margin-top）与下外边距（margin-bottom）有时会合并为单个外边距，这样的现象称为“margin 合并”</li></ul><h2 id="_27-对-bfc-规范-块级格式化上下文-blockformattingcontext-的理解" tabindex="-1">27.对 BFC 规范（块级格式化上下文：blockformattingcontext）的理解？ <a class="header-anchor" href="#_27-对-bfc-规范-块级格式化上下文-blockformattingcontext-的理解" aria-label="Permalink to &quot;27.对 BFC 规范（块级格式化上下文：blockformattingcontext）的理解？&quot;">​</a></h2><ul><li><a href="https://segmentfault.com/a/1190000013647777" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000013647777</a></li></ul><h2 id="_28-ifc-是什么" tabindex="-1">28.IFC 是什么？ <a class="header-anchor" href="#_28-ifc-是什么" aria-label="Permalink to &quot;28.IFC 是什么？&quot;">​</a></h2><h2 id="_29-请解释一下为什么需要清除浮动-清除浮动的方式" tabindex="-1">29.请解释一下为什么需要清除浮动？清除浮动的方式 <a class="header-anchor" href="#_29-请解释一下为什么需要清除浮动-清除浮动的方式" aria-label="Permalink to &quot;29.请解释一下为什么需要清除浮动？清除浮动的方式&quot;">​</a></h2><ul><li><p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属 于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。</p></li><li><p>清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使 我们页面后面的布局不能正常显示</p></li><li><p>清除浮动的方式</p><ul><li>使用 clear 属性清除浮动。</li><li>使用 BFC 块级格式化上下文来清除浮动。</li></ul></li></ul><h2 id="_30-使用-clear-属性清除浮动的原理" tabindex="-1">30.使用 clear 属性清除浮动的原理？ <a class="header-anchor" href="#_30-使用-clear-属性清除浮动的原理" aria-label="Permalink to &quot;30.使用 clear 属性清除浮动的原理？&quot;">​</a></h2><h2 id="_31-zoom-1-的清除浮动原理" tabindex="-1">31.zoom:1 的清除浮动原理? <a class="header-anchor" href="#_31-zoom-1-的清除浮动原理" aria-label="Permalink to &quot;31.zoom:1 的清除浮动原理?&quot;">​</a></h2><h2 id="_32-移动端的布局用过媒体查询吗" tabindex="-1">32.移动端的布局用过媒体查询吗？ <a class="header-anchor" href="#_32-移动端的布局用过媒体查询吗" aria-label="Permalink to &quot;32.移动端的布局用过媒体查询吗？&quot;">​</a></h2><h2 id="_33-使用-css-预处理器吗-喜欢哪个" tabindex="-1">33.使用 CSS 预处理器吗？喜欢哪个？ <a class="header-anchor" href="#_33-使用-css-预处理器吗-喜欢哪个" aria-label="Permalink to &quot;33.使用 CSS 预处理器吗？喜欢哪个？&quot;">​</a></h2><h2 id="_34-css-优化、提高性能的方法有哪些" tabindex="-1">34.CSS 优化、提高性能的方法有哪些？ <a class="header-anchor" href="#_34-css-优化、提高性能的方法有哪些" aria-label="Permalink to &quot;34.CSS 优化、提高性能的方法有哪些？&quot;">​</a></h2><h2 id="_35-浏览器是怎样解析-css-选择器的" tabindex="-1">35.浏览器是怎样解析 CSS 选择器的？ <a class="header-anchor" href="#_35-浏览器是怎样解析-css-选择器的" aria-label="Permalink to &quot;35.浏览器是怎样解析 CSS 选择器的？&quot;">​</a></h2><h2 id="_36-在网页中应该使用奇数还是偶数的字体-为什么呢" tabindex="-1">36.在网页中应该使用奇数还是偶数的字体？为什么呢？ <a class="header-anchor" href="#_36-在网页中应该使用奇数还是偶数的字体-为什么呢" aria-label="Permalink to &quot;36.在网页中应该使用奇数还是偶数的字体？为什么呢？&quot;">​</a></h2><h2 id="_37-margin-和-padding-分别适合什么场景使用" tabindex="-1">37.margin 和 padding 分别适合什么场景使用？ <a class="header-anchor" href="#_37-margin-和-padding-分别适合什么场景使用" aria-label="Permalink to &quot;37.margin 和 padding 分别适合什么场景使用？&quot;">​</a></h2><h2 id="_38-抽离样式模块怎么写-说出思路-有无实践经验" tabindex="-1">38.抽离样式模块怎么写，说出思路，有无实践经验？ <a class="header-anchor" href="#_38-抽离样式模块怎么写-说出思路-有无实践经验" aria-label="Permalink to &quot;38.抽离样式模块怎么写，说出思路，有无实践经验？&quot;">​</a></h2><h2 id="_39-简单说一下-css3-的-all-属性。" tabindex="-1">39.简单说一下 css3 的 all 属性。 <a class="header-anchor" href="#_39-简单说一下-css3-的-all-属性。" aria-label="Permalink to &quot;39.简单说一下 css3 的 all 属性。&quot;">​</a></h2><ul><li><p>all 属性实际上是所有 CSS 属性的缩写，表示，所有的 CSS 属性都怎样怎样，但是，不包括 unicode-bidi 和 direction 这两个 CSS 属性。支持三个 CSS 通用属性值，initial,inherit,unset。</p></li><li><p>initial 是初始值的意思，也就是该元素元素都除了 unicode-bidi 和 direction 以外的 CSS 属性都使用属性的默认初始值。</p></li><li><p>inherit 是继承的意思，也就是该元素除了 unicode-bidi 和 direction 以外的 CSS 属性都继承父元素的属性值。</p></li><li><p>unset 是取消设置的意思，也就是当前元素浏览器或用户设置的 CSS 忽略，然后如果是具有继承特性的 CSS，如 color，则使用继承值；如果是没有继承特性的 CSS 属性，如 background-color，则使用初始值。</p><p><a href="https://www.zhangxinxu.com/wordpress/2016/03/know-about-css3-all/" target="_blank" rel="noreferrer">https://www.zhangxinxu.com/wordpress/2016/03/know-about-css3-all/</a></p></li></ul><h2 id="_40-为什么不建议使用统配符初始化-css-样式。" tabindex="-1">40.为什么不建议使用统配符初始化 css 样式。 <a class="header-anchor" href="#_40-为什么不建议使用统配符初始化-css-样式。" aria-label="Permalink to &quot;40.为什么不建议使用统配符初始化 css 样式。&quot;">​</a></h2><h2 id="_41-absolute-的-containingblock-包含块-计算方式跟正常流有什么不同" tabindex="-1">41.absolute 的 containingblock（包含块）计算方式跟正常流有什么不同？ <a class="header-anchor" href="#_41-absolute-的-containingblock-包含块-计算方式跟正常流有什么不同" aria-label="Permalink to &quot;41.absolute 的 containingblock（包含块）计算方式跟正常流有什么不同？&quot;">​</a></h2><h2 id="_42-对于-haslayout-的理解" tabindex="-1">42.对于 hasLayout 的理解？ <a class="header-anchor" href="#_42-对于-haslayout-的理解" aria-label="Permalink to &quot;42.对于 hasLayout 的理解？&quot;">​</a></h2><h2 id="_43-元素竖向的百分比设定是相对于容器的高度吗" tabindex="-1">43.元素竖向的百分比设定是相对于容器的高度吗？ <a class="header-anchor" href="#_43-元素竖向的百分比设定是相对于容器的高度吗" aria-label="Permalink to &quot;43.元素竖向的百分比设定是相对于容器的高度吗？&quot;">​</a></h2><h2 id="_44-全屏滚动的原理是什么-用到了-css-的哪些属性-待深入实践" tabindex="-1">44.全屏滚动的原理是什么？用到了 CSS 的哪些属性？（待深入实践） <a class="header-anchor" href="#_44-全屏滚动的原理是什么-用到了-css-的哪些属性-待深入实践" aria-label="Permalink to &quot;44.全屏滚动的原理是什么？用到了 CSS 的哪些属性？（待深入实践）&quot;">​</a></h2><h2 id="_45-什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-ie" tabindex="-1">45.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 IE？ <a class="header-anchor" href="#_45-什么是响应式设计-响应式设计的基本原理是什么-如何兼容低版本的-ie" aria-label="Permalink to &quot;45.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的 IE？&quot;">​</a></h2><h2 id="_46-视差滚动效果-如何给每页做不同的动画-回到顶部-向下滑动要再次出现-和只出现一次分别怎么做" tabindex="-1">46.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？） <a class="header-anchor" href="#_46-视差滚动效果-如何给每页做不同的动画-回到顶部-向下滑动要再次出现-和只出现一次分别怎么做" aria-label="Permalink to &quot;46.视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）&quot;">​</a></h2><h2 id="_47-如何修改-chrome-记住密码后自动填充表单的黄色背景" tabindex="-1">47.如何修改 chrome 记住密码后自动填充表单的黄色背景？ <a class="header-anchor" href="#_47-如何修改-chrome-记住密码后自动填充表单的黄色背景" aria-label="Permalink to &quot;47.如何修改 chrome 记住密码后自动填充表单的黄色背景？&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/zsl_955200/article/details/78276209" target="_blank" rel="noreferrer">https://blog.csdn.net/zsl_955200/article/details/78276209</a></li></ul><h2 id="_48-怎么让-chrome-支持小于-12px-的文字" tabindex="-1">48.怎么让 Chrome 支持小于 12px 的文字？ <a class="header-anchor" href="#_48-怎么让-chrome-支持小于-12px-的文字" aria-label="Permalink to &quot;48.怎么让 Chrome 支持小于 12px 的文字？&quot;">​</a></h2><h2 id="_49-让页面里的字体变清晰-变细用-css-怎么做" tabindex="-1">49.让页面里的字体变清晰，变细用 CSS 怎么做？ <a class="header-anchor" href="#_49-让页面里的字体变清晰-变细用-css-怎么做" aria-label="Permalink to &quot;49.让页面里的字体变清晰，变细用 CSS 怎么做？&quot;">​</a></h2><h2 id="_50-font-style-属性中-italic-和-oblique-的区别" tabindex="-1">50.font-style 属性中 italic 和 oblique 的区别？ <a class="header-anchor" href="#_50-font-style-属性中-italic-和-oblique-的区别" aria-label="Permalink to &quot;50.font-style 属性中 italic 和 oblique 的区别？&quot;">​</a></h2><h2 id="_51-设备像素、css-像素、设备独立像素、dpr、ppi-之间的区别" tabindex="-1">51.设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别？ <a class="header-anchor" href="#_51-设备像素、css-像素、设备独立像素、dpr、ppi-之间的区别" aria-label="Permalink to &quot;51.设备像素、css 像素、设备独立像素、dpr、ppi 之间的区别？&quot;">​</a></h2><ul><li><code>设备像素</code>指的是物理像素，一般手机的分辨率指的就是设备像素，一个设备的设备像素是不 可变的。</li><li><code>css 像素和设备独立像素</code>是等价的，不管在何种分辨率的设备上，css 像素的大小应该是一致的，css 像素是一个相对单位，它是相对于设备像素的，一个 css 像素的大小取决于页面缩放程度和 dpr 的大小。</li><li><code>dpr</code> 指的是设备像素和设备独立像素的比值，一般的 pc 屏幕，dpr=1。在 iphone4 时，苹果推出了 retina 屏幕，它的 dpr 为 2。屏幕的缩放会改变 dpr 的值。</li><li><code>ppi</code> 指的是每英寸的物理像素的密度，ppi 越大，屏幕的分辨率越大。</li></ul><h2 id="_52-layoutviewport、visualviewport-和-idealviewport-的区别" tabindex="-1">52.layoutviewport、visualviewport 和 idealviewport 的区别？ <a class="header-anchor" href="#_52-layoutviewport、visualviewport-和-idealviewport-的区别" aria-label="Permalink to &quot;52.layoutviewport、visualviewport 和 idealviewport 的区别？&quot;">​</a></h2><h2 id="_53-position-fixed-在-android-下无效怎么处理" tabindex="-1">53.position:fixed;在 android 下无效怎么处理？ <a class="header-anchor" href="#_53-position-fixed-在-android-下无效怎么处理" aria-label="Permalink to &quot;53.position:fixed;在 android 下无效怎么处理？&quot;">​</a></h2><h2 id="_54-如果需要手动写动画-你认为最小时间间隔是多久-为什么-阿里" tabindex="-1">54.如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里） <a class="header-anchor" href="#_54-如果需要手动写动画-你认为最小时间间隔是多久-为什么-阿里" aria-label="Permalink to &quot;54.如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）&quot;">​</a></h2><h2 id="_55-如何让去除-inline-block-元素间间距" tabindex="-1">55.如何让去除 inline-block 元素间间距？ <a class="header-anchor" href="#_55-如何让去除-inline-block-元素间间距" aria-label="Permalink to &quot;55.如何让去除 inline-block 元素间间距？&quot;">​</a></h2><h2 id="_56-overflow-scroll-时不能平滑滚动的问题怎么处理" tabindex="-1">56.overflow:scroll 时不能平滑滚动的问题怎么处理？ <a class="header-anchor" href="#_56-overflow-scroll-时不能平滑滚动的问题怎么处理" aria-label="Permalink to &quot;56.overflow:scroll 时不能平滑滚动的问题怎么处理？&quot;">​</a></h2><h2 id="_57-有一个高度自适应的-div-里面有两个-div-一个高度-100px-希望另一个填满剩下的高度" tabindex="-1">57.有一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度 <a class="header-anchor" href="#_57-有一个高度自适应的-div-里面有两个-div-一个高度-100px-希望另一个填满剩下的高度" aria-label="Permalink to &quot;57.有一个高度自适应的 div，里面有两个 div，一个高度 100px，希望另一个填满剩下的高度&quot;">​</a></h2><h2 id="_58-png、jpg、gif-这些图片格式解释一下-分别什么时候用。有没有了解过-webp" tabindex="-1">58.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过 webp？ <a class="header-anchor" href="#_58-png、jpg、gif-这些图片格式解释一下-分别什么时候用。有没有了解过-webp" aria-label="Permalink to &quot;58.png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过 webp？&quot;">​</a></h2><h2 id="_59-浏览器如何判断是否支持-webp-格式图片" tabindex="-1">59.浏览器如何判断是否支持 webp 格式图片 <a class="header-anchor" href="#_59-浏览器如何判断是否支持-webp-格式图片" aria-label="Permalink to &quot;59.浏览器如何判断是否支持 webp 格式图片&quot;">​</a></h2><h2 id="_60-什么是-cookie-隔离-或者说-请求资源的时候不要让它带-cookie-怎么做" tabindex="-1">60.什么是 Cookie 隔离？（或者说：请求资源的时候不要让它带 cookie 怎么做） <a class="header-anchor" href="#_60-什么是-cookie-隔离-或者说-请求资源的时候不要让它带-cookie-怎么做" aria-label="Permalink to &quot;60.什么是 Cookie 隔离？（或者说：请求资源的时候不要让它带 cookie 怎么做）&quot;">​</a></h2><ul><li>网站向服务器请求的时候，会自动带上 cookie 这样增加表头信息量，使请求变慢。 如果静态文件都放在主域名下，那静态文件请求的时候都带有的 cookie 的数据提交给 server，非常浪费流量，所以不如隔离开，静态资源放 CDN。</li><li>因为 cookie 有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就 不会带有 cookie 数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。同时这种方式不会将 cookie 传入 WebServer，也减少了 WebServer 对 cookie 的处理分析环节，提高了 webserver 的 http 请求的解析速度。</li></ul><h2 id="_61-style-标签写在-body-后与-body-前有什么区别" tabindex="-1">61.style 标签写在 body 后与 body 前有什么区别？ <a class="header-anchor" href="#_61-style-标签写在-body-后与-body-前有什么区别" aria-label="Permalink to &quot;61.style 标签写在 body 后与 body 前有什么区别？&quot;">​</a></h2><h2 id="_62-什么是-css-预处理器-后处理器" tabindex="-1">62.什么是 CSS 预处理器/后处理器？ <a class="header-anchor" href="#_62-什么是-css-预处理器-后处理器" aria-label="Permalink to &quot;62.什么是 CSS 预处理器/后处理器？&quot;">​</a></h2><h2 id="_63-阐述一下-css-sprites" tabindex="-1">63.阐述一下 CSS Sprites <a class="header-anchor" href="#_63-阐述一下-css-sprites" aria-label="Permalink to &quot;63.阐述一下 CSS Sprites&quot;">​</a></h2><h2 id="_64-使用-rem-布局的优缺点" tabindex="-1">64.使用 rem 布局的优缺点？ <a class="header-anchor" href="#_64-使用-rem-布局的优缺点" aria-label="Permalink to &quot;64.使用 rem 布局的优缺点？&quot;">​</a></h2><h2 id="_65-几种常见的-css-布局" tabindex="-1">65.几种常见的 CSS 布局 <a class="header-anchor" href="#_65-几种常见的-css-布局" aria-label="Permalink to &quot;65.几种常见的 CSS 布局&quot;">​</a></h2><h2 id="_66-画一条-0-5px-的线" tabindex="-1">66.画一条 0.5px 的线 <a class="header-anchor" href="#_66-画一条-0-5px-的线" aria-label="Permalink to &quot;66.画一条 0.5px 的线&quot;">​</a></h2><h2 id="_67-transition-和-animation-的区别" tabindex="-1">67.transition 和 animation 的区别 <a class="header-anchor" href="#_67-transition-和-animation-的区别" aria-label="Permalink to &quot;67.transition 和 animation 的区别&quot;">​</a></h2><h2 id="_68-什么是首选最小宽度" tabindex="-1">68.什么是首选最小宽度？ <a class="header-anchor" href="#_68-什么是首选最小宽度" aria-label="Permalink to &quot;68.什么是首选最小宽度？&quot;">​</a></h2><h2 id="_69-为什么-height-100-会无效" tabindex="-1">69.为什么 height:100%会无效？ <a class="header-anchor" href="#_69-为什么-height-100-会无效" aria-label="Permalink to &quot;69.为什么 height:100%会无效？&quot;">​</a></h2><h2 id="_70-min-width-max-width-和-min-height-max-height-属性间的覆盖规则" tabindex="-1">70.min-width/max-width 和 min-height/max-height 属性间的覆盖规则？ <a class="header-anchor" href="#_70-min-width-max-width-和-min-height-max-height-属性间的覆盖规则" aria-label="Permalink to &quot;70.min-width/max-width 和 min-height/max-height 属性间的覆盖规则？&quot;">​</a></h2><h2 id="_71-内联盒模型基本概念" tabindex="-1">71.内联盒模型基本概念 <a class="header-anchor" href="#_71-内联盒模型基本概念" aria-label="Permalink to &quot;71.内联盒模型基本概念&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>内容区域（content area）</td><td>字符盒子，围绕文字内容的不可见区域。对于非文本替换元素，内容区域即为元素本身。</td></tr><tr><td>内联盒子（inline box）</td><td>不形成新行的盒子模型，与文本在同一行显示，包括“内联盒子”和“匿名内联盒子”。</td></tr><tr><td>行框盒子（line box）</td><td>每一行中由多个“内联盒子”组成的整体，所有内联盒子在一行中水平排列。</td></tr><tr><td>包含块（containing box）</td><td>由一行一行的“行框盒子”组成</td></tr></tbody></table><h2 id="_72-什么是幽灵空白节点" tabindex="-1">72.什么是幽灵空白节点？ <a class="header-anchor" href="#_72-什么是幽灵空白节点" aria-label="Permalink to &quot;72.什么是幽灵空白节点？&quot;">​</a></h2><h2 id="_73-什么是替换元素" tabindex="-1">73.什么是替换元素？ <a class="header-anchor" href="#_73-什么是替换元素" aria-label="Permalink to &quot;73.什么是替换元素？&quot;">​</a></h2><ul><li>通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。因此，<code>&lt;img&gt;</code>、 <code>&lt;object&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;iframe&gt;</code>或者表单元素<code>&lt;textarea&gt;</code>和<code>&lt;input&gt;</code>和<code>&lt;select&gt;</code>都是典型的替换元素。</li><li>替换元素除了内容可替换这一特性以外，还有以下一些特性</li></ul><ol><li>内容的外观不受页面上的 CSS 的影响。用专业的话讲就是在样式表现在 CSS 作用域之 外。如何更改替换元素本身的外观需要类似 appearance 属性，或者浏览器自身暴露的一些样式接口</li><li>有自己的尺寸。在 Web 中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺 寸（不包括边框）是 300 像素 ×150 像素，如<code>&lt;video&gt;、&lt;iframe&gt;或者&lt;canvas&gt;</code>等</li><li>在很多 CSS 属性上有自己的一套表现规则。比较具有代表性的就是 vertical-align 属性，对于替换元素和非替换元素，vertical-align 属性值的解释是不一样的</li><li>所有的替换元素都是内联水平元素，也就是替换元素和替换元素、替换元素和文字都 是可以在一行显示的。但是，替换元素默认的 display 值却是不一样的，有的是 inline，有的是 inline-block</li></ol><h2 id="_74-替换元素的计算规则" tabindex="-1">74.替换元素的计算规则？ <a class="header-anchor" href="#_74-替换元素的计算规则" aria-label="Permalink to &quot;74.替换元素的计算规则？&quot;">​</a></h2><h2 id="_75-content-与替换元素的关系" tabindex="-1">75.content 与替换元素的关系？ <a class="header-anchor" href="#_75-content-与替换元素的关系" aria-label="Permalink to &quot;75.content 与替换元素的关系？&quot;">​</a></h2><h2 id="_76-margin-auto-的填充规则" tabindex="-1">76.margin:auto 的填充规则？ <a class="header-anchor" href="#_76-margin-auto-的填充规则" aria-label="Permalink to &quot;76.margin:auto 的填充规则？&quot;">​</a></h2><h2 id="_77-margin-无效的情形" tabindex="-1">77.margin 无效的情形 <a class="header-anchor" href="#_77-margin-无效的情形" aria-label="Permalink to &quot;77.margin 无效的情形&quot;">​</a></h2><table tabindex="0"><thead><tr><th>原因</th><th>描述</th></tr></thead><tbody><tr><td>内联元素（inline）</td><td>默认情况下，内联元素的垂直<code>margin</code>（top/bottom）无效</td></tr><tr><td>浮动元素（float）</td><td>相邻浮动元素间的<code>margin</code>可能会发生合并现象</td></tr><tr><td>绝对定位（absolute）</td><td>当父级未设置定位时，绝对定位元素的<code>margin</code>可能不起作用</td></tr><tr><td>负<code>margin</code>与<code>overflow</code></td><td>父容器设置了<code>overflow: auto/hide</code>时，负<code>margin</code>可能无效</td></tr><tr><td>外边距折叠（collapsing）</td><td>相邻兄弟元素间或空块级元素与其子元素间可能出现外边距折叠</td></tr><tr><td>CSS 盒模型计算错误</td><td>在未指定<code>box-sizing</code>属性时，<code>margin</code>可能导致内容超出预期宽度</td></tr><tr><td>样式冲突或覆盖</td><td>更高级别的选择器或内联样式可能覆盖已定义的<code>margin</code>值</td></tr><tr><td>CSS 布局限制</td><td>Flexbox、Grid 等现代布局模式下，<code>margin</code>的表现受限于布局规则</td></tr></tbody></table><h2 id="_78-border-的特殊性" tabindex="-1">78.border 的特殊性？ <a class="header-anchor" href="#_78-border-的特殊性" aria-label="Permalink to &quot;78.border 的特殊性？&quot;">​</a></h2><h2 id="_79-什么是基线和-x-height" tabindex="-1">79.什么是基线和 x-height？ <a class="header-anchor" href="#_79-什么是基线和-x-height" aria-label="Permalink to &quot;79.什么是基线和 x-height？&quot;">​</a></h2><h2 id="_80-line-height-的特殊性" tabindex="-1">80.line-height 的特殊性？ <a class="header-anchor" href="#_80-line-height-的特殊性" aria-label="Permalink to &quot;80.line-height 的特殊性？&quot;">​</a></h2><h2 id="_81-vertical-align-的特殊性" tabindex="-1">81.vertical-align 的特殊性？ <a class="header-anchor" href="#_81-vertical-align-的特殊性" aria-label="Permalink to &quot;81.vertical-align 的特殊性？&quot;">​</a></h2><h2 id="_82-overflow-的特殊性" tabindex="-1">82.overflow 的特殊性？ <a class="header-anchor" href="#_82-overflow-的特殊性" aria-label="Permalink to &quot;82.overflow 的特殊性？&quot;">​</a></h2><h2 id="_83-无依赖绝对定位是什么" tabindex="-1">83.无依赖绝对定位是什么？ <a class="header-anchor" href="#_83-无依赖绝对定位是什么" aria-label="Permalink to &quot;83.无依赖绝对定位是什么？&quot;">​</a></h2><h2 id="_84-absolute-与-overflow-的关系" tabindex="-1">84.absolute 与 overflow 的关系？ <a class="header-anchor" href="#_84-absolute-与-overflow-的关系" aria-label="Permalink to &quot;84.absolute 与 overflow 的关系？&quot;">​</a></h2><h2 id="_85-clip-裁剪是什么" tabindex="-1">85.clip 裁剪是什么？ <a class="header-anchor" href="#_85-clip-裁剪是什么" aria-label="Permalink to &quot;85.clip 裁剪是什么？&quot;">​</a></h2><h2 id="_86-relative-的特殊性" tabindex="-1">86.relative 的特殊性？ <a class="header-anchor" href="#_86-relative-的特殊性" aria-label="Permalink to &quot;86.relative 的特殊性？&quot;">​</a></h2><h2 id="_87-什么是层叠上下文" tabindex="-1">87.什么是层叠上下文？ <a class="header-anchor" href="#_87-什么是层叠上下文" aria-label="Permalink to &quot;87.什么是层叠上下文？&quot;">​</a></h2><h2 id="_88-什么是层叠水平" tabindex="-1">88.什么是层叠水平？ <a class="header-anchor" href="#_88-什么是层叠水平" aria-label="Permalink to &quot;88.什么是层叠水平？&quot;">​</a></h2><h2 id="_89-元素的层叠顺序" tabindex="-1">89.元素的层叠顺序？ <a class="header-anchor" href="#_89-元素的层叠顺序" aria-label="Permalink to &quot;89.元素的层叠顺序？&quot;">​</a></h2><h2 id="_90-层叠准则" tabindex="-1">90.层叠准则？ <a class="header-anchor" href="#_90-层叠准则" aria-label="Permalink to &quot;90.层叠准则？&quot;">​</a></h2><h2 id="_91-font-weight-的特殊性" tabindex="-1">91.font-weight 的特殊性？ <a class="header-anchor" href="#_91-font-weight-的特殊性" aria-label="Permalink to &quot;91.font-weight 的特殊性？&quot;">​</a></h2><h2 id="_92-text-indent-的特殊性" tabindex="-1">92.text-indent 的特殊性？ <a class="header-anchor" href="#_92-text-indent-的特殊性" aria-label="Permalink to &quot;92.text-indent 的特殊性？&quot;">​</a></h2><h2 id="_93-letter-spacing-与字符间距" tabindex="-1">93.letter-spacing 与字符间距？ <a class="header-anchor" href="#_93-letter-spacing-与字符间距" aria-label="Permalink to &quot;93.letter-spacing 与字符间距？&quot;">​</a></h2><h2 id="_94-word-spacing-与单词间距" tabindex="-1">94.word-spacing 与单词间距？ <a class="header-anchor" href="#_94-word-spacing-与单词间距" aria-label="Permalink to &quot;94.word-spacing 与单词间距？&quot;">​</a></h2><h2 id="_95-white-space-与换行和空格的控制" tabindex="-1">95.white-space 与换行和空格的控制？ <a class="header-anchor" href="#_95-white-space-与换行和空格的控制" aria-label="Permalink to &quot;95.white-space 与换行和空格的控制？&quot;">​</a></h2><h2 id="_96-隐藏元素的-background-image-到底加不加载" tabindex="-1">96.隐藏元素的 background-image 到底加不加载？ <a class="header-anchor" href="#_96-隐藏元素的-background-image-到底加不加载" aria-label="Permalink to &quot;96.隐藏元素的 background-image 到底加不加载？&quot;">​</a></h2><ol><li>元素的背景图片</li></ol><ul><li>元素本身设置 display:none，会请求图片</li><li>父级元素设置 display:none，不会请求图片 样式没有元素使用，不会请求</li><li>:hover 样式下，触发时请求</li></ul><ol start="2"><li>img 标签图片任何情况下都会请求图片</li></ol><ul><li><a href="https://www.jb51.net/css/469033.html" target="_blank" rel="noreferrer">https://www.jb51.net/css/469033.html</a></li></ul><h2 id="_97-如何实现单行-多行文本溢出的省略" tabindex="-1">97.如何实现单行／多行文本溢出的省略（...）？ <a class="header-anchor" href="#_97-如何实现单行-多行文本溢出的省略" aria-label="Permalink to &quot;97.如何实现单行／多行文本溢出的省略（...）？&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*单行文本溢出*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ellipsis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nowrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*多行文本溢出*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*高度为需要显示的行数*行高，比如这里我们显示两行，则为 3*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_98-常见的元素隐藏方式" tabindex="-1">98.常见的元素隐藏方式？ <a class="header-anchor" href="#_98-常见的元素隐藏方式" aria-label="Permalink to &quot;98.常见的元素隐藏方式？&quot;">​</a></h2><table tabindex="0"><thead><tr><th>隐藏方式</th><th>描述</th></tr></thead><tbody><tr><td>display: none;</td><td>元素从渲染树中移除，不占据空间，不响应绑定的监听事件</td></tr><tr><td>visibility: hidden;</td><td>元素在页面中仍占据空间，但不可见，不响应绑定的监听事件</td></tr><tr><td>opacity: 0;</td><td>元素透明度为 0，占据空间，但仍能响应绑定的监听事件</td></tr><tr><td>绝对定位移出可视区域</td><td>通过绝对定位将元素移出浏览器视口，占据空间，可响应事件</td></tr><tr><td>z-index:负值</td><td>使用负 z-index 使其他元素覆盖该元素，占据空间，不响应事件</td></tr><tr><td>clip/clip-path 裁剪隐藏</td><td>通过裁剪属性隐藏元素内容，占据空间，不响应绑定的监听事件</td></tr><tr><td>transform: scale(0,0);</td><td>将元素缩放为 0，占据空间，但不会响应绑定的监听事件</td></tr></tbody></table><h2 id="_99-css-实现上下固定中间自适应布局" tabindex="-1">99.css 实现上下固定中间自适应布局？ <a class="header-anchor" href="#_99-css-实现上下固定中间自适应布局" aria-label="Permalink to &quot;99.css 实现上下固定中间自适应布局？&quot;">​</a></h2><h2 id="_100-css-两栏布局的实现" tabindex="-1">100.css 两栏布局的实现？ <a class="header-anchor" href="#_100-css-两栏布局的实现" aria-label="Permalink to &quot;100.css 两栏布局的实现？&quot;">​</a></h2><h2 id="_102-实现一个宽高自适应的正方形" tabindex="-1">102.实现一个宽高自适应的正方形 <a class="header-anchor" href="#_102-实现一个宽高自适应的正方形" aria-label="Permalink to &quot;102.实现一个宽高自适应的正方形&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*1.第一种方式是利用 vw 来实现*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tomato</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*2.第二种方式是利用元素的 margin/padding 百分比是相对父元素 width 的性质来实现*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  padding-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">orange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*3.第三种方式是利用子元素的 margin-top 的值来实现的*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.square::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_103-实现一个三角形" tabindex="-1">103.实现一个三角形 <a class="header-anchor" href="#_103-实现一个三角形" aria-label="Permalink to &quot;103.实现一个三角形&quot;">​</a></h2><h2 id="_104-一个自适应矩形-水平垂直居中-且宽高比为-2-1f" tabindex="-1">104.一个自适应矩形，水平垂直居中，且宽高比为 2:1F <a class="header-anchor" href="#_104-一个自适应矩形-水平垂直居中-且宽高比为-2-1f" aria-label="Permalink to &quot;104.一个自适应矩形，水平垂直居中，且宽高比为 2:1F&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*实现原理参考自适应正方形和水平居中方式*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  padding-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tomato</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,136),h=[l];function n(r,d,o,p,k,c){return s(),i("div",null,h)}const u=a(e,[["render",n]]);export{g as __pageData,u as default};
