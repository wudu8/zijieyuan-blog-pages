import{_ as e,c as a,o as t,a3 as i}from"./chunks/framework.b23AWjfV.js";const m=JSON.parse('{"title":"ZiJieYuan Blog","description":"","frontmatter":{},"headers":[],"relativePath":"README.en.md","filePath":"README.en.md"}'),n={name:"README.en.md"},s=i(`<h1 id="zijieyuan-blog" tabindex="-1">ZiJieYuan Blog <a class="header-anchor" href="#zijieyuan-blog" aria-label="Permalink to &quot;ZiJieYuan Blog&quot;">​</a></h1><p>Online blog address: [ByteApe - Personal Blog]（ <a href="https://wudu8.github.io/zijieyuan-blog-pages/" target="_blank" rel="noreferrer">https://wudu8.github.io/zijieyuan-blog-pages/</a> )</p><h1 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h1><p>To improve our technological competitiveness, the knowledge we have learned should be accumulated. In the technology community, we will find that knowledge is always fragmented, and we always cannot remember these supports in the long term. We cannot review them in the shortest possible time. Therefore, we should have a mechanism to maintain our learned knowledge and provide our own annotations.</p><h1 id="instructions" tabindex="-1">Instructions <a class="header-anchor" href="#instructions" aria-label="Permalink to &quot;Instructions&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Local</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:build</span></span></code></pre></div><h1 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to &quot;Deployment&quot;">​</a></h1><p>For the packaging directory zijieyuan blog pages, I specifically deployed it to GitHub pages. For submission convenience, I directly set the packaging directory as a sub repository of GitSubmodule. After packaging, it can be directly submitted to the corresponding repository. After pushing it, GitHub pages will automatically update the content of the online blog.</p><h2 id="reference-sub-warehouse-command" tabindex="-1">Reference Sub Warehouse Command <a class="header-anchor" href="#reference-sub-warehouse-command" aria-label="Permalink to &quot;Reference Sub Warehouse Command&quot;">​</a></h2><p>-[Upgrade Warehouse] Command Case: Yarn refer upgrade master or Yarn refer u master -[Check and update warehouse] Command case: yarn refer or yarn refer check or yarn refer c -[Add Warehouse] Command Example: Yarn refer add <a href="mailto:git@github.com" target="_blank" rel="noreferrer">git@github.com</a> : wudu8/zijieyuan blog. git or yarn refer a <a href="mailto:git@github.com" target="_blank" rel="noreferrer">git@github.com</a> :wudu8/zijieyuan-blog.git -[Delete Warehouse] Command Case: Yarn refer rm es6tutorial</p><p>After operating the sub warehouse, please execute the library update command</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:thirdpart</span></span></code></pre></div>`,12),r=[s];function o(l,h,d,p,c,u){return t(),a("div",null,r)}const b=e(n,[["render",o]]);export{m as __pageData,b as default};
