import{_ as t,c as s,o as i,a3 as a}from"./chunks/framework.b23AWjfV.js";const h="/zijieyuan-blog-pages/assets/husky.Up-VZvWZ.jpg",y=JSON.parse('{"title":"husky","description":"","frontmatter":{},"headers":[],"relativePath":"Toolkit/每日工具库/10.husky.md","filePath":"Toolkit/每日工具库/10.husky.md"}'),e={name:"Toolkit/每日工具库/10.husky.md"},p=a(`<h1 id="husky" tabindex="-1">husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;husky&quot;">​</a></h1><h2 id="什么是-husky" tabindex="-1">什么是 Husky？ <a class="header-anchor" href="#什么是-husky" aria-label="Permalink to &quot;什么是 Husky？&quot;">​</a></h2><p>Husky 是一个用于在 Git 提交前执行脚本的工具包。它可以方便地管理 Git 钩子，如 pre-commit、pre-push 等，使得在特定 Git 操作前执行脚本变得简单。通过 Husky，开发团队可以在代码提交前自动执行代码规范检查、单元测试等操作，从而确保提交的代码质量。</p><h2 id="如何使用-husky" tabindex="-1">如何使用 Husky？ <a class="header-anchor" href="#如何使用-husky" aria-label="Permalink to &quot;如何使用 Husky？&quot;">​</a></h2><p>使用 Husky 非常简单。首先，我们需要在项目的 package.json 文件中配置 Husky 的 hooks，指定在特定 Git 钩子触发时需要执行的脚本。例如，我们可以在 pre-commit 钩子触发时执行代码规范检查，在 pre-push 钩子触发时执行单元测试。以下是一个示例配置：</p><blockquote><p>使用命令行工具配置 Husky</p></blockquote><ul><li><code>新版本推荐方式</code></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/pre-commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm run lint&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/pre-push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm test&quot;</span></span></code></pre></div><blockquote><p>package.json 文件中的 &quot;husky&quot; 字段下配置</p></blockquote><ul><li><code>注意：新版本不支持了</code></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pre-commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pre-push&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>通过上述命令 Git 挂钩可以使用 .husky/ 目录中挂钩的单独文件进行配置的</li></ul><blockquote><p>使用 .huskyrc.js 配置文件</p></blockquote><ul><li><code>注意：新版本不支持了</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .huskyrc.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hooks: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;pre-commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;pre-push&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><img src="`+h+'" alt="husky"></li></ul><h2 id="git-hook-钩子" tabindex="-1">git hook 钩子 <a class="header-anchor" href="#git-hook-钩子" aria-label="Permalink to &quot;git hook 钩子&quot;">​</a></h2><table tabindex="0"><thead><tr><th>钩子名称</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>applypatch-msg</td><td>在执行 git am 命令时，用于验证提交消息</td><td>可以用于验证提交消息的格式，拒绝不符合规范的提交消息</td></tr><tr><td>pre-applypatch</td><td>在执行 git am 命令之前</td><td>可以在应用补丁前执行自定义操作，如检查环境、备份数据等</td></tr><tr><td>post-applypatch</td><td>在执行 git am 命令之后</td><td>可以在应用补丁后执行自定义操作，如清理临时文件、发送通知等</td></tr><tr><td>pre-commit</td><td>在执行 git commit 命令之前</td><td>可以在提交前执行自定义操作，如代码风格检查、单元测试等</td></tr><tr><td>prepare-commit-msg</td><td>在执行 git commit 命令时，用于编辑提交消息</td><td>可以用于编辑提交消息，如添加自动化生成的信息或模板</td></tr><tr><td>commit-msg</td><td>在执行 git commit 命令时，用于验证提交消息</td><td>可以用于验证提交消息的格式，拒绝不符合规范的提交消息</td></tr><tr><td>post-commit</td><td>在执行 git commit 命令之后</td><td>可以在提交后执行自定义操作，如更新文档、触发构建等</td></tr><tr><td>pre-rebase</td><td>在执行 git rebase 命令之前</td><td>可以在变基操作前执行自定义操作，如暂存工作区、中断变基等</td></tr><tr><td>post-checkout</td><td>在执行 git checkout 命令之后</td><td>可以在切换分支后执行自定义操作，如更新依赖、清理缓存等</td></tr><tr><td>post-merge</td><td>在执行 git merge 命令之后</td><td>可以在合并后执行自定义操作，如触发自动化测试、更新子模块等</td></tr><tr><td>pre-push</td><td>在执行 git push 命令之前</td><td>可以在推送前执行自定义操作，如运行集成测试、检查代码规范等</td></tr><tr><td>pre-receive</td><td>在接收 git push 命令时</td><td>可以在接收推送时执行自定义操作，如拒绝非法提交、检查权限等</td></tr><tr><td>update</td><td>在接收 git push 命令时，用于验证更新</td><td>可以用于验证更新操作，如拒绝不符合规范的更新</td></tr><tr><td>post-receive</td><td>在接收 git push 命令后</td><td>可以在接收推送后执行自定义操作，如触发部署、发送通知等</td></tr><tr><td>post-update</td><td>在接收 git push 命令后，用于更新参考</td><td>可以在更新参考后执行自定义操作，如清理缓存、触发后续任务等</td></tr><tr><td>pre-auto-gc</td><td>在执行 git gc --auto 命令之前</td><td>可以在自动垃圾回收前执行自定义操作，如暂停服务、备份数据等</td></tr><tr><td>post-rewrite</td><td>在执行 git commit --amend 或 git rebase 命令后</td><td>可以在重写历史后执行自定义操作，如更新相关引用、发送通知等</td></tr></tbody></table><h2 id="同类型工具" tabindex="-1">同类型工具 <a class="header-anchor" href="#同类型工具" aria-label="Permalink to &quot;同类型工具&quot;">​</a></h2><ul><li>simple-git-hooks</li></ul><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">https://git-scm.com/docs/githooks</a></li></ul>',22),n=[p];function l(d,k,o,r,u,c){return i(),s("div",null,n)}const E=t(e,[["render",l]]);export{y as __pageData,E as default};
