import{_ as a,c as i,o as e,a3 as s}from"./chunks/framework.b23AWjfV.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewQuestions/P3 八股文/4.JavaScript.md","filePath":"InterviewQuestions/P3 八股文/4.JavaScript.md"}'),t={name:"InterviewQuestions/P3 八股文/4.JavaScript.md"},h=s(`<h2 id="您能提供一个柯里化函数的例子-以及为什么这个语法会有优势" tabindex="-1">您能提供一个柯里化函数的例子，以及为什么这个语法会有优势？ <a class="header-anchor" href="#您能提供一个柯里化函数的例子-以及为什么这个语法会有优势" aria-label="Permalink to &quot;您能提供一个柯里化函数的例子，以及为什么这个语法会有优势？&quot;">​</a></h2><p>柯里化是一种模式，即一个有多个参数的函数被分解成多个函数，当被串联调用时，将一次积累所有需要的参数。 这种技术有助于使以函数式风格的代码更容易阅读和组合。 值得注意的是，要使一个函数被柯里化，它需要从一个函数开始，然后分解成一连串的函数，每个函数接受一个参数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fn.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newArgument</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (depth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, newArgument);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(depth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, newArgument]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curriedAdd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addFive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curriedAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addFive); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [5, 6, 7, 8, 9, 10]</span></span></code></pre></div><h2 id="描述事件冒泡过程" tabindex="-1">描述事件冒泡过程 <a class="header-anchor" href="#描述事件冒泡过程" aria-label="Permalink to &quot;描述事件冒泡过程&quot;">​</a></h2><p>事件冒泡是 DOM（文档对象模型）中的一种传播机制，其中事件，如点击或键盘事件，首先在启动事件的目标元素上触发，然后向上（冒泡）通过 DOM 树传播到文档的根部。</p><h3 id="冒泡阶段" tabindex="-1">冒泡阶段 <a class="header-anchor" href="#冒泡阶段" aria-label="Permalink to &quot;冒泡阶段&quot;">​</a></h3><p>在冒泡阶段期间，事件从目标元素开始，并通过其在 DOM 层次结构中的祖先向上冒泡。这意味着附加到目标元素及其祖先的事件处理程序都有可能接收并响应事件。</p><p>以下是使用现代 ES6 语法演示事件冒泡的示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HTML:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;div id=&quot;parent&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &lt;button id=&quot;child&quot;&gt;点击我！&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;单击了父元素&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;单击了子元素&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>当单击 &quot;点击我！&quot; 按钮时，由于事件冒泡，子元素和父元素的事件处理程序都将被触发。</p><h3 id="阻止传播" tabindex="-1">阻止传播 <a class="header-anchor" href="#阻止传播" aria-label="Permalink to &quot;阻止传播&quot;">​</a></h3><p>在冒泡阶段，可以使用 <code>stopPropagation()</code> 方法停止事件传播。如果事件处理程序调用 <code>stopPropagation()</code>，它将阻止事件继续向上冒泡到 DOM 树，确保只有位于层次结构中的元素的处理程序被执行。</p><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h3><p>事件冒泡是一种称为 &quot;事件委托&quot; 的技术的基础，其中将单个事件处理程序附加到多个元素的共同祖先，并使用事件委托有效地处理这些元素的事件。当您有大量类似元素，例如项目列表时，希望避免为每个项目附加单独的事件处理程序时，这种方法特别有用。</p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling" target="_blank" rel="noreferrer">MDN Web Docs 上的事件冒泡</a></li><li><a href="https://javascript.info/bubbling-and-capturing" target="_blank" rel="noreferrer">JavaScript.info - 冒泡和捕获</a></li><li><a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-flow" target="_blank" rel="noreferrer">W3C DOM Level 3 事件规范</a></li></ul><h2 id="javascript-面试知识点总结" tabindex="-1">JavaScript 面试知识点总结 <a class="header-anchor" href="#javascript-面试知识点总结" aria-label="Permalink to &quot;JavaScript 面试知识点总结&quot;">​</a></h2><h2 id="_1-介绍-js-的基本数据类型。" tabindex="-1">1. 介绍 js 的基本数据类型。 <a class="header-anchor" href="#_1-介绍-js-的基本数据类型。" aria-label="Permalink to &quot;1. 介绍 js 的基本数据类型。&quot;">​</a></h2><h2 id="_2-javascript-有几种类型的值-你能画一下他们的内存图吗" tabindex="-1">2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？ <a class="header-anchor" href="#_2-javascript-有几种类型的值-你能画一下他们的内存图吗" aria-label="Permalink to &quot;2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？&quot;">​</a></h2><h2 id="_3-什么是堆-什么是栈-它们之间有什么区别和联系" tabindex="-1">3. 什么是堆？什么是栈？它们之间有什么区别和联系？ <a class="header-anchor" href="#_3-什么是堆-什么是栈-它们之间有什么区别和联系" aria-label="Permalink to &quot;3. 什么是堆？什么是栈？它们之间有什么区别和联系？&quot;">​</a></h2><h2 id="_4-内部属性-class-是什么" tabindex="-1">4. 内部属性 [[Class]] 是什么？ <a class="header-anchor" href="#_4-内部属性-class-是什么" aria-label="Permalink to &quot;4. 内部属性 [[Class]] 是什么？&quot;">​</a></h2><h2 id="_5-介绍-js-有哪些内置对象" tabindex="-1">5. 介绍 js 有哪些内置对象？ <a class="header-anchor" href="#_5-介绍-js-有哪些内置对象" aria-label="Permalink to &quot;5. 介绍 js 有哪些内置对象？&quot;">​</a></h2><h2 id="_6-undefined-与-undeclared-的区别" tabindex="-1">6. undefined 与 undeclared 的区别？ <a class="header-anchor" href="#_6-undefined-与-undeclared-的区别" aria-label="Permalink to &quot;6. undefined 与 undeclared 的区别？&quot;">​</a></h2><h2 id="_7-null-和-undefined-的区别" tabindex="-1">7. null 和 undefined 的区别？ <a class="header-anchor" href="#_7-null-和-undefined-的区别" aria-label="Permalink to &quot;7. null 和 undefined 的区别？&quot;">​</a></h2><h2 id="_8-如何获取安全的-undefined-值" tabindex="-1">8. 如何获取安全的 undefined 值？ <a class="header-anchor" href="#_8-如何获取安全的-undefined-值" aria-label="Permalink to &quot;8. 如何获取安全的 undefined 值？&quot;">​</a></h2><h2 id="_9-说几条写-javascript-的基本规范-常项目开发中-我们遵守一些这样的基本规范-比如说" tabindex="-1">9. 说几条写 JavaScript 的基本规范？ 常项目开发中，我们遵守一些这样的基本规范，比如说： <a class="header-anchor" href="#_9-说几条写-javascript-的基本规范-常项目开发中-我们遵守一些这样的基本规范-比如说" aria-label="Permalink to &quot;9. 说几条写 JavaScript 的基本规范？ 常项目开发中，我们遵守一些这样的基本规范，比如说：&quot;">​</a></h2><h2 id="_10-javascript-原型-原型链-有什么特点" tabindex="-1">10. JavaScript 原型，原型链？ 有什么特点？ <a class="header-anchor" href="#_10-javascript-原型-原型链-有什么特点" aria-label="Permalink to &quot;10. JavaScript 原型，原型链？ 有什么特点？&quot;">​</a></h2><h2 id="_11-js-获取原型的方法" tabindex="-1">11. js 获取原型的方法？ <a class="header-anchor" href="#_11-js-获取原型的方法" aria-label="Permalink to &quot;11. js 获取原型的方法？&quot;">​</a></h2><h2 id="_12-在-js-中不同进制数字的表示方式" tabindex="-1">12. 在 js 中不同进制数字的表示方式 <a class="header-anchor" href="#_12-在-js-中不同进制数字的表示方式" aria-label="Permalink to &quot;12. 在 js 中不同进制数字的表示方式&quot;">​</a></h2><h2 id="_13-js-中整数的安全范围是多少" tabindex="-1">13. js 中整数的安全范围是多少？ <a class="header-anchor" href="#_13-js-中整数的安全范围是多少" aria-label="Permalink to &quot;13. js 中整数的安全范围是多少？&quot;">​</a></h2><h2 id="_14-typeof-nan-的结果是什么" tabindex="-1">14. typeof NaN 的结果是什么？ <a class="header-anchor" href="#_14-typeof-nan-的结果是什么" aria-label="Permalink to &quot;14. typeof NaN 的结果是什么？&quot;">​</a></h2><h2 id="_15-isnan-和-number-isnan-函数的区别" tabindex="-1">15. isNaN 和 Number.isNaN 函数的区别？ <a class="header-anchor" href="#_15-isnan-和-number-isnan-函数的区别" aria-label="Permalink to &quot;15. isNaN 和 Number.isNaN 函数的区别？&quot;">​</a></h2><h2 id="_16-array-构造函数只有一个参数值时的表现" tabindex="-1">16. Array 构造函数只有一个参数值时的表现？ <a class="header-anchor" href="#_16-array-构造函数只有一个参数值时的表现" aria-label="Permalink to &quot;16. Array 构造函数只有一个参数值时的表现？&quot;">​</a></h2><h2 id="_17-其他值到字符串的转换规则" tabindex="-1">17. 其他值到字符串的转换规则？ <a class="header-anchor" href="#_17-其他值到字符串的转换规则" aria-label="Permalink to &quot;17. 其他值到字符串的转换规则？&quot;">​</a></h2><h2 id="_18-其他值到数字值的转换规则" tabindex="-1">18. 其他值到数字值的转换规则？ <a class="header-anchor" href="#_18-其他值到数字值的转换规则" aria-label="Permalink to &quot;18. 其他值到数字值的转换规则？&quot;">​</a></h2><h2 id="_19-其他值到布尔类型的值的转换规则" tabindex="-1">19. 其他值到布尔类型的值的转换规则？ <a class="header-anchor" href="#_19-其他值到布尔类型的值的转换规则" aria-label="Permalink to &quot;19. 其他值到布尔类型的值的转换规则？&quot;">​</a></h2><h2 id="_20-和-的-valueof-和-tostring-的结果是什么" tabindex="-1">20. {} 和 [] 的 valueOf 和 toString 的结果是什么？ <a class="header-anchor" href="#_20-和-的-valueof-和-tostring-的结果是什么" aria-label="Permalink to &quot;20. {} 和 [] 的 valueOf 和 toString 的结果是什么？&quot;">​</a></h2><h2 id="_21-什么是假值对象" tabindex="-1">21. 什么是假值对象？ <a class="header-anchor" href="#_21-什么是假值对象" aria-label="Permalink to &quot;21. 什么是假值对象？&quot;">​</a></h2><h2 id="_22-操作符的作用" tabindex="-1">22. ~ 操作符的作用？ <a class="header-anchor" href="#_22-操作符的作用" aria-label="Permalink to &quot;22. ~ 操作符的作用？&quot;">​</a></h2><h2 id="_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么" tabindex="-1">23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？ <a class="header-anchor" href="#_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么" aria-label="Permalink to &quot;23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？&quot;">​</a></h2><h2 id="_24-操作符什么时候用于字符串的拼接" tabindex="-1">24. + 操作符什么时候用于字符串的拼接？ <a class="header-anchor" href="#_24-操作符什么时候用于字符串的拼接" aria-label="Permalink to &quot;24. + 操作符什么时候用于字符串的拼接？&quot;">​</a></h2><h2 id="_25-什么情况下会发生布尔值的隐式强制类型转换" tabindex="-1">25. 什么情况下会发生布尔值的隐式强制类型转换？ <a class="header-anchor" href="#_25-什么情况下会发生布尔值的隐式强制类型转换" aria-label="Permalink to &quot;25. 什么情况下会发生布尔值的隐式强制类型转换？&quot;">​</a></h2><h2 id="_26-和-操作符的返回值" tabindex="-1">26. || 和 &amp;&amp; 操作符的返回值？ <a class="header-anchor" href="#_26-和-操作符的返回值" aria-label="Permalink to &quot;26. || 和 &amp;&amp; 操作符的返回值？&quot;">​</a></h2><h2 id="_28-操作符的强制类型转换规则" tabindex="-1">28. == 操作符的强制类型转换规则？ <a class="header-anchor" href="#_28-操作符的强制类型转换规则" aria-label="Permalink to &quot;28. == 操作符的强制类型转换规则？&quot;">​</a></h2><h2 id="_29-如何将字符串转化为数字-例如-12-3b" tabindex="-1">29. 如何将字符串转化为数字，例如 &#39;12.3b&#39;? <a class="header-anchor" href="#_29-如何将字符串转化为数字-例如-12-3b" aria-label="Permalink to &quot;29. 如何将字符串转化为数字，例如 &#39;12.3b&#39;?&quot;">​</a></h2><h2 id="_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为-2-000-000-11』" tabindex="-1">30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为 2,000,000.11』? <a class="header-anchor" href="#_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为-2-000-000-11』" aria-label="Permalink to &quot;30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为 2,000,000.11』?&quot;">​</a></h2><h2 id="_31-常用正则表达式" tabindex="-1">31. 常用正则表达式 <a class="header-anchor" href="#_31-常用正则表达式" aria-label="Permalink to &quot;31. 常用正则表达式&quot;">​</a></h2><h2 id="_32-生成随机数的各种方法" tabindex="-1">32. 生成随机数的各种方法？ <a class="header-anchor" href="#_32-生成随机数的各种方法" aria-label="Permalink to &quot;32. 生成随机数的各种方法？&quot;">​</a></h2><h2 id="_33-如何实现数组的随机排序" tabindex="-1">33. 如何实现数组的随机排序？ <a class="header-anchor" href="#_33-如何实现数组的随机排序" aria-label="Permalink to &quot;33. 如何实现数组的随机排序？&quot;">​</a></h2><h2 id="_34-javascript-创建对象的几种方式" tabindex="-1">34. javascript 创建对象的几种方式？ <a class="header-anchor" href="#_34-javascript-创建对象的几种方式" aria-label="Permalink to &quot;34. javascript 创建对象的几种方式？&quot;">​</a></h2><h2 id="_35-javascript-继承的几种实现方式" tabindex="-1">35. JavaScript 继承的几种实现方式？ <a class="header-anchor" href="#_35-javascript-继承的几种实现方式" aria-label="Permalink to &quot;35. JavaScript 继承的几种实现方式？&quot;">​</a></h2><h2 id="_36-寄生式组合继承的实现" tabindex="-1">36. 寄生式组合继承的实现？ <a class="header-anchor" href="#_36-寄生式组合继承的实现" aria-label="Permalink to &quot;36. 寄生式组合继承的实现？&quot;">​</a></h2><h2 id="_37-javascript-的作用域链" tabindex="-1">37. Javascript 的作用域链？ <a class="header-anchor" href="#_37-javascript-的作用域链" aria-label="Permalink to &quot;37. Javascript 的作用域链？&quot;">​</a></h2><h2 id="_38-谈谈-this-对象的理解。" tabindex="-1">38. 谈谈 This 对象的理解。 <a class="header-anchor" href="#_38-谈谈-this-对象的理解。" aria-label="Permalink to &quot;38. 谈谈 This 对象的理解。&quot;">​</a></h2><h2 id="_39-eval-是做什么的" tabindex="-1">39. eval 是做什么的？ <a class="header-anchor" href="#_39-eval-是做什么的" aria-label="Permalink to &quot;39. eval 是做什么的？&quot;">​</a></h2><h2 id="_40-什么是-dom-和-bom" tabindex="-1">40. 什么是 DOM 和 BOM？ <a class="header-anchor" href="#_40-什么是-dom-和-bom" aria-label="Permalink to &quot;40. 什么是 DOM 和 BOM？&quot;">​</a></h2><h2 id="_41-写一个通用的事件侦听器函数。" tabindex="-1">41. 写一个通用的事件侦听器函数。 <a class="header-anchor" href="#_41-写一个通用的事件侦听器函数。" aria-label="Permalink to &quot;41. 写一个通用的事件侦听器函数。&quot;">​</a></h2><h2 id="_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡" tabindex="-1">42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？ <a class="header-anchor" href="#_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡" aria-label="Permalink to &quot;42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？&quot;">​</a></h2><h2 id="_43-三种事件模型是什么" tabindex="-1">43. 三种事件模型是什么？ <a class="header-anchor" href="#_43-三种事件模型是什么" aria-label="Permalink to &quot;43. 三种事件模型是什么？&quot;">​</a></h2><h2 id="_44-事件委托是什么" tabindex="-1">44. 事件委托是什么？ <a class="header-anchor" href="#_44-事件委托是什么" aria-label="Permalink to &quot;44. 事件委托是什么？&quot;">​</a></h2><h2 id="_45-1-2-3-map-parseint-答案是多少" tabindex="-1">45. [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？ <a class="header-anchor" href="#_45-1-2-3-map-parseint-答案是多少" aria-label="Permalink to &quot;45. [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？&quot;">​</a></h2><h2 id="_46-什么是闭包-为什么要用它" tabindex="-1">46. 什么是闭包，为什么要用它？ <a class="header-anchor" href="#_46-什么是闭包-为什么要用它" aria-label="Permalink to &quot;46. 什么是闭包，为什么要用它？&quot;">​</a></h2><h2 id="_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么" tabindex="-1">47. javascript 代码中的 &quot;use strict&quot;; 是什么意思 ? 使用它区别是什么？ <a class="header-anchor" href="#_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么" aria-label="Permalink to &quot;47. javascript 代码中的 &quot;use strict&quot;; 是什么意思 ? 使用它区别是什么？&quot;">​</a></h2><h2 id="_48-如何判断一个对象是否属于某个类" tabindex="-1">48. 如何判断一个对象是否属于某个类？ <a class="header-anchor" href="#_48-如何判断一个对象是否属于某个类" aria-label="Permalink to &quot;48. 如何判断一个对象是否属于某个类？&quot;">​</a></h2><h2 id="_49-instanceof-的作用" tabindex="-1">49. instanceof 的作用？ <a class="header-anchor" href="#_49-instanceof-的作用" aria-label="Permalink to &quot;49. instanceof 的作用？&quot;">​</a></h2><h2 id="_50-new-操作符具体干了什么呢-如何实现" tabindex="-1">50. new 操作符具体干了什么呢？如何实现？ <a class="header-anchor" href="#_50-new-操作符具体干了什么呢-如何实现" aria-label="Permalink to &quot;50. new 操作符具体干了什么呢？如何实现？&quot;">​</a></h2><h2 id="_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是" tabindex="-1">51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？ <a class="header-anchor" href="#_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是" aria-label="Permalink to &quot;51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？&quot;">​</a></h2><h2 id="_52-对于-json-的了解" tabindex="-1">52. 对于 JSON 的了解？ <a class="header-anchor" href="#_52-对于-json-的了解" aria-label="Permalink to &quot;52. 对于 JSON 的了解？&quot;">​</a></h2><h2 id="_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗" tabindex="-1">53. [].forEach.call($$(&quot;&quot;),function(a){a.style.outline=&quot;1px solid +(~~(Math.random()(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？ <a class="header-anchor" href="#_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗" aria-label="Permalink to &quot;53. [].forEach.call($$(&quot;&quot;),function(a){a.style.outline=&quot;1px solid +(~~(Math.random()(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？&quot;">​</a></h2><h2 id="_54-js-延迟加载的方式有哪些" tabindex="-1">54. js 延迟加载的方式有哪些？ <a class="header-anchor" href="#_54-js-延迟加载的方式有哪些" aria-label="Permalink to &quot;54. js 延迟加载的方式有哪些？&quot;">​</a></h2><h2 id="_55-ajax-是什么-如何创建一个-ajax" tabindex="-1">55. Ajax 是什么? 如何创建一个 Ajax？ <a class="header-anchor" href="#_55-ajax-是什么-如何创建一个-ajax" aria-label="Permalink to &quot;55. Ajax 是什么? 如何创建一个 Ajax？&quot;">​</a></h2><h2 id="_56-谈一谈浏览器的缓存机制" tabindex="-1">56. 谈一谈浏览器的缓存机制？ <a class="header-anchor" href="#_56-谈一谈浏览器的缓存机制" aria-label="Permalink to &quot;56. 谈一谈浏览器的缓存机制？&quot;">​</a></h2><h2 id="_57-ajax-解决浏览器缓存问题" tabindex="-1">57. Ajax 解决浏览器缓存问题？ <a class="header-anchor" href="#_57-ajax-解决浏览器缓存问题" aria-label="Permalink to &quot;57. Ajax 解决浏览器缓存问题？&quot;">​</a></h2><h2 id="_58-同步和异步的区别" tabindex="-1">58. 同步和异步的区别？ <a class="header-anchor" href="#_58-同步和异步的区别" aria-label="Permalink to &quot;58. 同步和异步的区别？&quot;">​</a></h2><h2 id="_59-什么是浏览器的同源政策" tabindex="-1">59. 什么是浏览器的同源政策？ <a class="header-anchor" href="#_59-什么是浏览器的同源政策" aria-label="Permalink to &quot;59. 什么是浏览器的同源政策？&quot;">​</a></h2><h2 id="_60-如何解决跨域问题" tabindex="-1">60. 如何解决跨域问题？ <a class="header-anchor" href="#_60-如何解决跨域问题" aria-label="Permalink to &quot;60. 如何解决跨域问题？&quot;">​</a></h2><h2 id="_61-服务器代理转发时-该如何处理-cookie" tabindex="-1">61. 服务器代理转发时，该如何处理 cookie？ <a class="header-anchor" href="#_61-服务器代理转发时-该如何处理-cookie" aria-label="Permalink to &quot;61. 服务器代理转发时，该如何处理 cookie？&quot;">​</a></h2><h2 id="_62-简单谈一下-cookie" tabindex="-1">62. 简单谈一下 cookie ？ <a class="header-anchor" href="#_62-简单谈一下-cookie" aria-label="Permalink to &quot;62. 简单谈一下 cookie ？&quot;">​</a></h2><h2 id="_63-模块化开发怎么做" tabindex="-1">63. 模块化开发怎么做？ <a class="header-anchor" href="#_63-模块化开发怎么做" aria-label="Permalink to &quot;63. 模块化开发怎么做？&quot;">​</a></h2><h2 id="_64-js-的几种模块规范" tabindex="-1">64. js 的几种模块规范？ <a class="header-anchor" href="#_64-js-的几种模块规范" aria-label="Permalink to &quot;64. js 的几种模块规范？&quot;">​</a></h2><h2 id="_65-amd-和-cmd-规范的区别" tabindex="-1">65. AMD 和 CMD 规范的区别？ <a class="header-anchor" href="#_65-amd-和-cmd-规范的区别" aria-label="Permalink to &quot;65. AMD 和 CMD 规范的区别？&quot;">​</a></h2><h2 id="_66-es6-模块与-commonjs-模块、amd、cmd-的差异。" tabindex="-1">66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。 <a class="header-anchor" href="#_66-es6-模块与-commonjs-模块、amd、cmd-的差异。" aria-label="Permalink to &quot;66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。&quot;">​</a></h2><h2 id="_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存" tabindex="-1">67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存 <a class="header-anchor" href="#_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存" aria-label="Permalink to &quot;67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存&quot;">​</a></h2><h2 id="_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器" tabindex="-1">68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？ <a class="header-anchor" href="#_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器" aria-label="Permalink to &quot;68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？&quot;">​</a></h2><h2 id="_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西" tabindex="-1">69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西? <a class="header-anchor" href="#_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西" aria-label="Permalink to &quot;69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?&quot;">​</a></h2><h2 id="_70-documen-write-和-innerhtml-的区别" tabindex="-1">70. documen.write 和 innerHTML 的区别？ <a class="header-anchor" href="#_70-documen-write-和-innerhtml-的区别" aria-label="Permalink to &quot;70. documen.write 和 innerHTML 的区别？&quot;">​</a></h2><h2 id="_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点" tabindex="-1">71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？ <a class="header-anchor" href="#_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点" aria-label="Permalink to &quot;71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？&quot;">​</a></h2><h2 id="_72-innerhtml-与-outerhtml-的区别" tabindex="-1">72. innerHTML 与 outerHTML 的区别？ <a class="header-anchor" href="#_72-innerhtml-与-outerhtml-的区别" aria-label="Permalink to &quot;72. innerHTML 与 outerHTML 的区别？&quot;">​</a></h2><h2 id="_73-call-和-apply-的区别" tabindex="-1">73. .call() 和 .apply() 的区别？ <a class="header-anchor" href="#_73-call-和-apply-的区别" aria-label="Permalink to &quot;73. .call() 和 .apply() 的区别？&quot;">​</a></h2><h2 id="_74-javascript-类数组对象的定义" tabindex="-1">74. JavaScript 类数组对象的定义？ <a class="header-anchor" href="#_74-javascript-类数组对象的定义" aria-label="Permalink to &quot;74. JavaScript 类数组对象的定义？&quot;">​</a></h2><h2 id="_75-数组和对象有哪些原生方法-列举一下" tabindex="-1">75. 数组和对象有哪些原生方法，列举一下？ <a class="header-anchor" href="#_75-数组和对象有哪些原生方法-列举一下" aria-label="Permalink to &quot;75. 数组和对象有哪些原生方法，列举一下？&quot;">​</a></h2><h2 id="_76-数组的-fill-方法" tabindex="-1">76. 数组的 fill 方法？ <a class="header-anchor" href="#_76-数组的-fill-方法" aria-label="Permalink to &quot;76. 数组的 fill 方法？&quot;">​</a></h2><h2 id="_77-的长度" tabindex="-1">77. [,,,] 的长度？ <a class="header-anchor" href="#_77-的长度" aria-label="Permalink to &quot;77. [,,,] 的长度？&quot;">​</a></h2><h2 id="_78-javascript-中的作用域与变量声明提升" tabindex="-1">78. JavaScript 中的作用域与变量声明提升？ <a class="header-anchor" href="#_78-javascript-中的作用域与变量声明提升" aria-label="Permalink to &quot;78. JavaScript 中的作用域与变量声明提升？&quot;">​</a></h2><h2 id="_79-如何编写高性能的-javascript" tabindex="-1">79. 如何编写高性能的 Javascript ？ <a class="header-anchor" href="#_79-如何编写高性能的-javascript" aria-label="Permalink to &quot;79. 如何编写高性能的 Javascript ？&quot;">​</a></h2><h2 id="_80-简单介绍一下-v8-引擎的垃圾回收机制" tabindex="-1">80. 简单介绍一下 V8 引擎的垃圾回收机制 <a class="header-anchor" href="#_80-简单介绍一下-v8-引擎的垃圾回收机制" aria-label="Permalink to &quot;80. 简单介绍一下 V8 引擎的垃圾回收机制&quot;">​</a></h2><h2 id="_81-哪些操作会造成内存泄漏" tabindex="-1">81. 哪些操作会造成内存泄漏？ <a class="header-anchor" href="#_81-哪些操作会造成内存泄漏" aria-label="Permalink to &quot;81. 哪些操作会造成内存泄漏？&quot;">​</a></h2><h2 id="_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响-给出你的技术实现方案" tabindex="-1">82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响 给出你的技术实现方案？ <a class="header-anchor" href="#_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响-给出你的技术实现方案" aria-label="Permalink to &quot;82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响 给出你的技术实现方案？&quot;">​</a></h2><h2 id="_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里" tabindex="-1">83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里） <a class="header-anchor" href="#_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里" aria-label="Permalink to &quot;83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）&quot;">​</a></h2><h2 id="_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器何解析它们" tabindex="-1">84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器何解析它们？ <a class="header-anchor" href="#_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器何解析它们" aria-label="Permalink to &quot;84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器何解析它们？&quot;">​</a></h2><h2 id="_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时" tabindex="-1">85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？ <a class="header-anchor" href="#_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时" aria-label="Permalink to &quot;85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？&quot;">​</a></h2><h2 id="_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点" tabindex="-1">86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？ <a class="header-anchor" href="#_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点" aria-label="Permalink to &quot;86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？&quot;">​</a></h2><h2 id="_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程-mocha-sinon-jasmin-qunit" tabindex="-1">87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程 mocha, sinon, jasmin, qUnit..？ <a class="header-anchor" href="#_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程-mocha-sinon-jasmin-qunit" aria-label="Permalink to &quot;87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程 mocha, sinon, jasmin, qUnit..？&quot;">​</a></h2><h2 id="_88-检测浏览器版本版本有哪些方式" tabindex="-1">88. 检测浏览器版本版本有哪些方式？ <a class="header-anchor" href="#_88-检测浏览器版本版本有哪些方式" aria-label="Permalink to &quot;88. 检测浏览器版本版本有哪些方式？&quot;">​</a></h2><h2 id="_89-什么是-polyfill" tabindex="-1">89. 什么是 Polyfill ？ <a class="header-anchor" href="#_89-什么是-polyfill" aria-label="Permalink to &quot;89. 什么是 Polyfill ？&quot;">​</a></h2><h2 id="_90-使用-js-实现获取文件扩展名" tabindex="-1">90. 使用 JS 实现获取文件扩展名？ <a class="header-anchor" href="#_90-使用-js-实现获取文件扩展名" aria-label="Permalink to &quot;90. 使用 JS 实现获取文件扩展名？&quot;">​</a></h2><h2 id="_91-介绍一下-js-的节流与防抖" tabindex="-1">91. 介绍一下 js 的节流与防抖？ <a class="header-anchor" href="#_91-介绍一下-js-的节流与防抖" aria-label="Permalink to &quot;91. 介绍一下 js 的节流与防抖？&quot;">​</a></h2><h2 id="_92-object-is-与原来的比较操作符-、-的区别" tabindex="-1">92. Object.is() 与原来的比较操作符 “===”、“==” 的区别？ <a class="header-anchor" href="#_92-object-is-与原来的比较操作符-、-的区别" aria-label="Permalink to &quot;92. Object.is() 与原来的比较操作符 “===”、“==” 的区别？&quot;">​</a></h2><h2 id="_93-escape-encodeuri-encodeuricomponent-有什么区别" tabindex="-1">93. escape,encodeURI,encodeURIComponent 有什么区别？ <a class="header-anchor" href="#_93-escape-encodeuri-encodeuricomponent-有什么区别" aria-label="Permalink to &quot;93. escape,encodeURI,encodeURIComponent 有什么区别？&quot;">​</a></h2><h2 id="_94-unicode-和-utf-8-之间的关系" tabindex="-1">94. Unicode 和 UTF-8 之间的关系？ <a class="header-anchor" href="#_94-unicode-和-utf-8-之间的关系" aria-label="Permalink to &quot;94. Unicode 和 UTF-8 之间的关系？&quot;">​</a></h2><h2 id="_95-js-的事件循环是什么" tabindex="-1">95. js 的事件循环是什么？ <a class="header-anchor" href="#_95-js-的事件循环是什么" aria-label="Permalink to &quot;95. js 的事件循环是什么？&quot;">​</a></h2><h2 id="_96-js-中的深浅拷贝实现" tabindex="-1">96. js 中的深浅拷贝实现？ <a class="header-anchor" href="#_96-js-中的深浅拷贝实现" aria-label="Permalink to &quot;96. js 中的深浅拷贝实现？&quot;">​</a></h2><h2 id="_97-手写-call、apply-及-bind-函数" tabindex="-1">97. 手写 call、apply 及 bind 函数 <a class="header-anchor" href="#_97-手写-call、apply-及-bind-函数" aria-label="Permalink to &quot;97. 手写 call、apply 及 bind 函数&quot;">​</a></h2><h2 id="_98-函数柯里化的实现" tabindex="-1">98. 函数柯里化的实现 <a class="header-anchor" href="#_98-函数柯里化的实现" aria-label="Permalink to &quot;98. 函数柯里化的实现&quot;">​</a></h2><h2 id="_99-为什么-0-1-0-2-0-3-如何解决这个问题" tabindex="-1">99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？ <a class="header-anchor" href="#_99-为什么-0-1-0-2-0-3-如何解决这个问题" aria-label="Permalink to &quot;99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？&quot;">​</a></h2><h2 id="_100-原码、反码和补码的介绍" tabindex="-1">100. 原码、反码和补码的介绍 <a class="header-anchor" href="#_100-原码、反码和补码的介绍" aria-label="Permalink to &quot;100. 原码、反码和补码的介绍&quot;">​</a></h2><h2 id="_101-toprecision-和-tofixed-和-math-round-的区别" tabindex="-1">101. toPrecision 和 toFixed 和 Math.round 的区别？ <a class="header-anchor" href="#_101-toprecision-和-tofixed-和-math-round-的区别" aria-label="Permalink to &quot;101. toPrecision 和 toFixed 和 Math.round 的区别？&quot;">​</a></h2><h2 id="_102-什么是-xss-攻击-如何防范-xss-攻击" tabindex="-1">102. 什么是 XSS 攻击？如何防范 XSS 攻击？ <a class="header-anchor" href="#_102-什么是-xss-攻击-如何防范-xss-攻击" aria-label="Permalink to &quot;102. 什么是 XSS 攻击？如何防范 XSS 攻击？&quot;">​</a></h2><h2 id="_103-什么是-csp" tabindex="-1">103. 什么是 CSP？ <a class="header-anchor" href="#_103-什么是-csp" aria-label="Permalink to &quot;103. 什么是 CSP？&quot;">​</a></h2><h2 id="_104-什么是-csrf-攻击-如何防范-csrf-攻击" tabindex="-1">104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？ <a class="header-anchor" href="#_104-什么是-csrf-攻击-如何防范-csrf-攻击" aria-label="Permalink to &quot;104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？&quot;">​</a></h2><h2 id="_105-什么是-samesite-cookie-属性" tabindex="-1">105. 什么是 Samesite Cookie 属性？ <a class="header-anchor" href="#_105-什么是-samesite-cookie-属性" aria-label="Permalink to &quot;105. 什么是 Samesite Cookie 属性？&quot;">​</a></h2><h2 id="_106-什么是点击劫持-如何防范点击劫持" tabindex="-1">106. 什么是点击劫持？如何防范点击劫持？ <a class="header-anchor" href="#_106-什么是点击劫持-如何防范点击劫持" aria-label="Permalink to &quot;106. 什么是点击劫持？如何防范点击劫持？&quot;">​</a></h2><h2 id="_107-sql-注入攻击" tabindex="-1">107. SQL 注入攻击？ <a class="header-anchor" href="#_107-sql-注入攻击" aria-label="Permalink to &quot;107. SQL 注入攻击？&quot;">​</a></h2><h2 id="_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp" tabindex="-1">108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？ <a class="header-anchor" href="#_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp" aria-label="Permalink to &quot;108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？&quot;">​</a></h2><h2 id="_109-vue-双向数据绑定原理" tabindex="-1">109. vue 双向数据绑定原理？ <a class="header-anchor" href="#_109-vue-双向数据绑定原理" aria-label="Permalink to &quot;109. vue 双向数据绑定原理？&quot;">​</a></h2><h2 id="_110-object-defineproperty-介绍" tabindex="-1">110. Object.defineProperty 介绍？ <a class="header-anchor" href="#_110-object-defineproperty-介绍" aria-label="Permalink to &quot;110. Object.defineProperty 介绍？&quot;">​</a></h2><h2 id="_111-使用-object-defineproperty-来进行数据劫持有什么缺点" tabindex="-1">111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？ <a class="header-anchor" href="#_111-使用-object-defineproperty-来进行数据劫持有什么缺点" aria-label="Permalink to &quot;111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？&quot;">​</a></h2><h2 id="_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快" tabindex="-1">112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？ <a class="header-anchor" href="#_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快" aria-label="Permalink to &quot;112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？&quot;">​</a></h2><h2 id="_113-如何比较两个-dom-树的差异" tabindex="-1">113. 如何比较两个 DOM 树的差异？ <a class="header-anchor" href="#_113-如何比较两个-dom-树的差异" aria-label="Permalink to &quot;113. 如何比较两个 DOM 树的差异？&quot;">​</a></h2><h2 id="_114-什么是-requestanimationframe" tabindex="-1">114. 什么是 requestAnimationFrame ？ <a class="header-anchor" href="#_114-什么是-requestanimationframe" aria-label="Permalink to &quot;114. 什么是 requestAnimationFrame ？&quot;">​</a></h2><h2 id="_115-谈谈你对-webpack-的看法" tabindex="-1">115. 谈谈你对 webpack 的看法 <a class="header-anchor" href="#_115-谈谈你对-webpack-的看法" aria-label="Permalink to &quot;115. 谈谈你对 webpack 的看法&quot;">​</a></h2><h2 id="_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的" tabindex="-1">116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的？ <a class="header-anchor" href="#_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的" aria-label="Permalink to &quot;116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的？&quot;">​</a></h2><h2 id="_117-谈一谈你理解的函数式编程" tabindex="-1">117. 谈一谈你理解的函数式编程？ <a class="header-anchor" href="#_117-谈一谈你理解的函数式编程" aria-label="Permalink to &quot;117. 谈一谈你理解的函数式编程？&quot;">​</a></h2><h2 id="_118-异步编程的实现方式" tabindex="-1">118. 异步编程的实现方式？ <a class="header-anchor" href="#_118-异步编程的实现方式" aria-label="Permalink to &quot;118. 异步编程的实现方式？&quot;">​</a></h2><h2 id="_119-js-动画与-css-动画区别及相应实现" tabindex="-1">119. Js 动画与 CSS 动画区别及相应实现 <a class="header-anchor" href="#_119-js-动画与-css-动画区别及相应实现" aria-label="Permalink to &quot;119. Js 动画与 CSS 动画区别及相应实现&quot;">​</a></h2><h2 id="_120-get-请求传参长度的误区" tabindex="-1">120. get 请求传参长度的误区 <a class="header-anchor" href="#_120-get-请求传参长度的误区" aria-label="Permalink to &quot;120. get 请求传参长度的误区&quot;">​</a></h2><h2 id="_121-url-和-uri-的区别" tabindex="-1">121. URL 和 URI 的区别？ <a class="header-anchor" href="#_121-url-和-uri-的区别" aria-label="Permalink to &quot;121. URL 和 URI 的区别？&quot;">​</a></h2><h2 id="_122-get-和-post-请求在缓存方面的区别" tabindex="-1">122. get 和 post 请求在缓存方面的区别 <a class="header-anchor" href="#_122-get-和-post-请求在缓存方面的区别" aria-label="Permalink to &quot;122. get 和 post 请求在缓存方面的区别&quot;">​</a></h2><h2 id="_123-图片的懒加载和预加载" tabindex="-1">123. 图片的懒加载和预加载 <a class="header-anchor" href="#_123-图片的懒加载和预加载" aria-label="Permalink to &quot;123. 图片的懒加载和预加载&quot;">​</a></h2><h2 id="_124-mouseover-和-mouseenter-的区别" tabindex="-1">124. mouseover 和 mouseenter 的区别？ <a class="header-anchor" href="#_124-mouseover-和-mouseenter-的区别" aria-label="Permalink to &quot;124. mouseover 和 mouseenter 的区别？&quot;">​</a></h2><h2 id="_125-js-拖拽功能的实现" tabindex="-1">125. js 拖拽功能的实现 <a class="header-anchor" href="#_125-js-拖拽功能的实现" aria-label="Permalink to &quot;125. js 拖拽功能的实现&quot;">​</a></h2><h2 id="_126-为什么使用-settimeout-实现-setinterval-怎么模拟" tabindex="-1">126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？ <a class="header-anchor" href="#_126-为什么使用-settimeout-实现-setinterval-怎么模拟" aria-label="Permalink to &quot;126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？&quot;">​</a></h2><h2 id="_127-let-和-const-的注意点" tabindex="-1">127. let 和 const 的注意点？ <a class="header-anchor" href="#_127-let-和-const-的注意点" aria-label="Permalink to &quot;127. let 和 const 的注意点？&quot;">​</a></h2><h2 id="_128-什么是-rest-参数" tabindex="-1">128. 什么是 rest 参数？ <a class="header-anchor" href="#_128-什么是-rest-参数" aria-label="Permalink to &quot;128. 什么是 rest 参数？&quot;">​</a></h2><h2 id="_129-什么是尾调用-使用尾调用有什么好处" tabindex="-1">129. 什么是尾调用，使用尾调用有什么好处？ <a class="header-anchor" href="#_129-什么是尾调用-使用尾调用有什么好处" aria-label="Permalink to &quot;129. 什么是尾调用，使用尾调用有什么好处？&quot;">​</a></h2><h2 id="_130-symbol-类型的注意点" tabindex="-1">130. Symbol 类型的注意点？ <a class="header-anchor" href="#_130-symbol-类型的注意点" aria-label="Permalink to &quot;130. Symbol 类型的注意点？&quot;">​</a></h2><h2 id="_131-set-和-weakset-结构" tabindex="-1">131. Set 和 WeakSet 结构？ <a class="header-anchor" href="#_131-set-和-weakset-结构" aria-label="Permalink to &quot;131. Set 和 WeakSet 结构？&quot;">​</a></h2><h2 id="_132-map-和-weakmap-结构" tabindex="-1">132. Map 和 WeakMap 结构？ <a class="header-anchor" href="#_132-map-和-weakmap-结构" aria-label="Permalink to &quot;132. Map 和 WeakMap 结构？&quot;">​</a></h2><h2 id="_133-什么是-proxy" tabindex="-1">133. 什么是 Proxy ？ <a class="header-anchor" href="#_133-什么是-proxy" aria-label="Permalink to &quot;133. 什么是 Proxy ？&quot;">​</a></h2><h2 id="_134-reflect-对象创建目的" tabindex="-1">134. Reflect 对象创建目的？ <a class="header-anchor" href="#_134-reflect-对象创建目的" aria-label="Permalink to &quot;134. Reflect 对象创建目的？&quot;">​</a></h2><h2 id="_135-require-模块引入的查找方式" tabindex="-1">135. require 模块引入的查找方式？ <a class="header-anchor" href="#_135-require-模块引入的查找方式" aria-label="Permalink to &quot;135. require 模块引入的查找方式？&quot;">​</a></h2><h2 id="_136-什么是-promise-对象-什么是-promises-a-规范" tabindex="-1">136. 什么是 Promise 对象，什么是 Promises/A+ 规范？ <a class="header-anchor" href="#_136-什么是-promise-对象-什么是-promises-a-规范" aria-label="Permalink to &quot;136. 什么是 Promise 对象，什么是 Promises/A+ 规范？&quot;">​</a></h2><h2 id="_137-手写一个-promise" tabindex="-1">137. 手写一个 Promise <a class="header-anchor" href="#_137-手写一个-promise" aria-label="Permalink to &quot;137. 手写一个 Promise&quot;">​</a></h2><h2 id="_138-如何检测浏览器所支持的最小字体大小" tabindex="-1">138. 如何检测浏览器所支持的最小字体大小？ <a class="header-anchor" href="#_138-如何检测浏览器所支持的最小字体大小" aria-label="Permalink to &quot;138. 如何检测浏览器所支持的最小字体大小？&quot;">​</a></h2><h2 id="_139-怎么做-js-代码-error-统计" tabindex="-1">139. 怎么做 JS 代码 Error 统计？ <a class="header-anchor" href="#_139-怎么做-js-代码-error-统计" aria-label="Permalink to &quot;139. 怎么做 JS 代码 Error 统计？&quot;">​</a></h2><h2 id="_140-单例模式模式是什么" tabindex="-1">140. 单例模式模式是什么？ <a class="header-anchor" href="#_140-单例模式模式是什么" aria-label="Permalink to &quot;140. 单例模式模式是什么？&quot;">​</a></h2><h2 id="_141-策略模式是什么" tabindex="-1">141. 策略模式是什么？ <a class="header-anchor" href="#_141-策略模式是什么" aria-label="Permalink to &quot;141. 策略模式是什么？&quot;">​</a></h2><h2 id="_142-代理模式是什么" tabindex="-1">142. 代理模式是什么？ <a class="header-anchor" href="#_142-代理模式是什么" aria-label="Permalink to &quot;142. 代理模式是什么？&quot;">​</a></h2><h2 id="_143-中介者模式是什么" tabindex="-1">143. 中介者模式是什么？ <a class="header-anchor" href="#_143-中介者模式是什么" aria-label="Permalink to &quot;143. 中介者模式是什么？&quot;">​</a></h2><h2 id="_144-适配器模式是什么" tabindex="-1">144. 适配器模式是什么？ <a class="header-anchor" href="#_144-适配器模式是什么" aria-label="Permalink to &quot;144. 适配器模式是什么？&quot;">​</a></h2><h2 id="_145-观察者模式和发布订阅模式有什么不同" tabindex="-1">145. 观察者模式和发布订阅模式有什么不同？ <a class="header-anchor" href="#_145-观察者模式和发布订阅模式有什么不同" aria-label="Permalink to &quot;145. 观察者模式和发布订阅模式有什么不同？&quot;">​</a></h2><h2 id="_146-vue-的生命周期是什么" tabindex="-1">146. Vue 的生命周期是什么？ <a class="header-anchor" href="#_146-vue-的生命周期是什么" aria-label="Permalink to &quot;146. Vue 的生命周期是什么？&quot;">​</a></h2><h2 id="_147-vue-的各个生命阶段是什么" tabindex="-1">147. Vue 的各个生命阶段是什么？ <a class="header-anchor" href="#_147-vue-的各个生命阶段是什么" aria-label="Permalink to &quot;147. Vue 的各个生命阶段是什么？&quot;">​</a></h2><h2 id="_148-vue-组件间的参数传递方式" tabindex="-1">148. Vue 组件间的参数传递方式？ <a class="header-anchor" href="#_148-vue-组件间的参数传递方式" aria-label="Permalink to &quot;148. Vue 组件间的参数传递方式？&quot;">​</a></h2><h2 id="_149-computed-和-watch-的差异" tabindex="-1">149. computed 和 watch 的差异？ <a class="header-anchor" href="#_149-computed-和-watch-的差异" aria-label="Permalink to &quot;149. computed 和 watch 的差异？&quot;">​</a></h2><h2 id="_150-vue-router-中的导航钩子函数" tabindex="-1">150. vue-router 中的导航钩子函数 <a class="header-anchor" href="#_150-vue-router-中的导航钩子函数" aria-label="Permalink to &quot;150. vue-router 中的导航钩子函数&quot;">​</a></h2><h2 id="_151-route-和-router-的区别" tabindex="-1">151. $route 和 $router 的区别？ <a class="header-anchor" href="#_151-route-和-router-的区别" aria-label="Permalink to &quot;151. $route 和 $router 的区别？&quot;">​</a></h2><h2 id="_152-vue-常用的修饰符" tabindex="-1">152. vue 常用的修饰符？ <a class="header-anchor" href="#_152-vue-常用的修饰符" aria-label="Permalink to &quot;152. vue 常用的修饰符？&quot;">​</a></h2><h2 id="_153-vue-中-key-值的作用" tabindex="-1">153. vue 中 key 值的作用？ <a class="header-anchor" href="#_153-vue-中-key-值的作用" aria-label="Permalink to &quot;153. vue 中 key 值的作用？&quot;">​</a></h2><h2 id="_154-computed-和-watch-区别" tabindex="-1">154. computed 和 watch 区别？ <a class="header-anchor" href="#_154-computed-和-watch-区别" aria-label="Permalink to &quot;154. computed 和 watch 区别？&quot;">​</a></h2><h2 id="_155-keep-alive-组件有什么作用" tabindex="-1">155. keep-alive 组件有什么作用？ <a class="header-anchor" href="#_155-keep-alive-组件有什么作用" aria-label="Permalink to &quot;155. keep-alive 组件有什么作用？&quot;">​</a></h2><h2 id="_156-vue-中-mixin-和-mixins-区别" tabindex="-1">156. vue 中 mixin 和 mixins 区别？ <a class="header-anchor" href="#_156-vue-中-mixin-和-mixins-区别" aria-label="Permalink to &quot;156. vue 中 mixin 和 mixins 区别？&quot;">​</a></h2><h2 id="_157-开发中常用的几种-content-type" tabindex="-1">157. 开发中常用的几种 Content-Type ？ <a class="header-anchor" href="#_157-开发中常用的几种-content-type" aria-label="Permalink to &quot;157. 开发中常用的几种 Content-Type ？&quot;">​</a></h2><h2 id="_158-如何封装一个-javascript-的类型判断函数" tabindex="-1">158. 如何封装一个 javascript 的类型判断函数？ <a class="header-anchor" href="#_158-如何封装一个-javascript-的类型判断函数" aria-label="Permalink to &quot;158. 如何封装一个 javascript 的类型判断函数？&quot;">​</a></h2><h2 id="_159-如何判断一个对象是否为空对象" tabindex="-1">159. 如何判断一个对象是否为空对象？ <a class="header-anchor" href="#_159-如何判断一个对象是否为空对象" aria-label="Permalink to &quot;159. 如何判断一个对象是否为空对象？&quot;">​</a></h2><h2 id="_160-使用闭包实现每隔一秒打印-1-2-3-4" tabindex="-1">160. 使用闭包实现每隔一秒打印 1,2,3,4 <a class="header-anchor" href="#_160-使用闭包实现每隔一秒打印-1-2-3-4" aria-label="Permalink to &quot;160. 使用闭包实现每隔一秒打印 1,2,3,4&quot;">​</a></h2><h2 id="_161-手写一个-jsonp" tabindex="-1">161. 手写一个 jsonp <a class="header-anchor" href="#_161-手写一个-jsonp" aria-label="Permalink to &quot;161. 手写一个 jsonp&quot;">​</a></h2><h2 id="_162-手写一个观察者模式" tabindex="-1">162. 手写一个观察者模式？ <a class="header-anchor" href="#_162-手写一个观察者模式" aria-label="Permalink to &quot;162. 手写一个观察者模式？&quot;">​</a></h2><h2 id="_163-eventemitter-实现" tabindex="-1">163. EventEmitter 实现 <a class="header-anchor" href="#_163-eventemitter-实现" aria-label="Permalink to &quot;163. EventEmitter 实现&quot;">​</a></h2><h2 id="_164-一道常被人轻视的前端-js-面试题" tabindex="-1">164. 一道常被人轻视的前端 JS 面试题 <a class="header-anchor" href="#_164-一道常被人轻视的前端-js-面试题" aria-label="Permalink to &quot;164. 一道常被人轻视的前端 JS 面试题&quot;">​</a></h2><h2 id="_165-如何确定页面的可用性时间-什么是-performance-api" tabindex="-1">165. 如何确定页面的可用性时间，什么是 Performance API？ <a class="header-anchor" href="#_165-如何确定页面的可用性时间-什么是-performance-api" aria-label="Permalink to &quot;165. 如何确定页面的可用性时间，什么是 Performance API？&quot;">​</a></h2><h2 id="_166-js-中的命名规则" tabindex="-1">166. js 中的命名规则 <a class="header-anchor" href="#_166-js-中的命名规则" aria-label="Permalink to &quot;166. js 中的命名规则&quot;">​</a></h2><h2 id="_167-js-语句末尾分号是否可以省略" tabindex="-1">167. js 语句末尾分号是否可以省略？ <a class="header-anchor" href="#_167-js-语句末尾分号是否可以省略" aria-label="Permalink to &quot;167. js 语句末尾分号是否可以省略？&quot;">​</a></h2><h2 id="_168-object-assign" tabindex="-1">168. Object.assign() <a class="header-anchor" href="#_168-object-assign" aria-label="Permalink to &quot;168. Object.assign()&quot;">​</a></h2><h2 id="_169-math-ceil-和-math-floor" tabindex="-1">169. Math.ceil 和 Math.floor <a class="header-anchor" href="#_169-math-ceil-和-math-floor" aria-label="Permalink to &quot;169. Math.ceil 和 Math.floor&quot;">​</a></h2><h2 id="_170-js-for-循环注意点" tabindex="-1">170. js for 循环注意点 <a class="header-anchor" href="#_170-js-for-循环注意点" aria-label="Permalink to &quot;170. js for 循环注意点&quot;">​</a></h2><h2 id="_171-一个列表-假设有-100000-个数据-这个该怎么办" tabindex="-1">171. 一个列表，假设有 100000 个数据，这个该怎么办？ <a class="header-anchor" href="#_171-一个列表-假设有-100000-个数据-这个该怎么办" aria-label="Permalink to &quot;171. 一个列表，假设有 100000 个数据，这个该怎么办？&quot;">​</a></h2><h2 id="_172-js-中倒计时的纠偏实现" tabindex="-1">172. js 中倒计时的纠偏实现？ <a class="header-anchor" href="#_172-js-中倒计时的纠偏实现" aria-label="Permalink to &quot;172. js 中倒计时的纠偏实现？&quot;">​</a></h2><h2 id="_173-进程间通信的方式" tabindex="-1">173. 进程间通信的方式？ <a class="header-anchor" href="#_173-进程间通信的方式" aria-label="Permalink to &quot;173. 进程间通信的方式？&quot;">​</a></h2>`,189),r=[h];function n(l,o,d,c,k,p){return e(),i("div",null,r)}const q=a(t,[["render",n]]);export{b as __pageData,q as default};
