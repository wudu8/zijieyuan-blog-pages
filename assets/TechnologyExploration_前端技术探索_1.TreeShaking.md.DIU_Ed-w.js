import{_ as l,c as e,o as a,a3 as i}from"./chunks/framework.b23AWjfV.js";const t="/zijieyuan-blog-pages/assets/treeshaking.LEzD5war.jpg",T=JSON.parse('{"title":"TreeShaking","description":"","frontmatter":{},"headers":[],"relativePath":"TechnologyExploration/前端技术探索/1.TreeShaking.md","filePath":"TechnologyExploration/前端技术探索/1.TreeShaking.md"}'),o={name:"TechnologyExploration/前端技术探索/1.TreeShaking.md"},r=i('<h1 id="treeshaking" tabindex="-1">TreeShaking <a class="header-anchor" href="#treeshaking" aria-label="Permalink to &quot;TreeShaking&quot;">​</a></h1><h2 id="什么是-treeshaking" tabindex="-1">什么是 TreeShaking ？ <a class="header-anchor" href="#什么是-treeshaking" aria-label="Permalink to &quot;什么是 TreeShaking ？&quot;">​</a></h2><ul><li>业界知名的模块打包器 rollup.js 的作者 Rich Harris 在 2015 年 12 月的一篇博客<a href="https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80" target="_blank" rel="noreferrer">《Tree-shaking versus dead code elimination》</a> 中首次提到了 Tree-Shaking 的概念，</li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> I’ve been working (albeit sporadically of late, admittedly) on a tool called Rollup, which bundles together JavaScript modules. One of its features is tree-shaking, by which I mean that it only includes the bits of code your bundle actually needs to run.</span></span></code></pre></div><ul><li>Tree-Shaking 是为了 Dead code elimination (DCE)，这是编译器原理中常见的一种编译优化技术，简单来说就是消除无用代码（Dead code）</li></ul><h2 id="dead-code-特征" tabindex="-1">Dead Code 特征 <a class="header-anchor" href="#dead-code-特征" aria-label="Permalink to &quot;Dead Code 特征&quot;">​</a></h2><ul><li>代码不会被执行，不可到达</li><li>代码执行的结果不会被用到</li><li>代码只会影响死变量（只写不读）</li></ul><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><h3 id="思路一" tabindex="-1">思路一 <a class="header-anchor" href="#思路一" aria-label="Permalink to &quot;思路一&quot;">​</a></h3><blockquote><p>第一步：解析源代码生成 ast 第二步：遍历 ast，记录相关信息</p></blockquote><ul><li>收集所有的函数或变量类型节点</li><li>收集所有使用过的函数或变量类型节点</li></ul><blockquote><p>第三步：根据第二步得到的信息，生成新代码</p></blockquote><h3 id="rollup-跨文件-tree-shaking-原理" tabindex="-1">rollup 跨文件 Tree Shaking 原理 <a class="header-anchor" href="#rollup-跨文件-tree-shaking-原理" aria-label="Permalink to &quot;rollup 跨文件 Tree Shaking 原理&quot;">​</a></h3><ul><li><code>静态分析模块依赖</code>： Rollup 会首先对整个代码库进行静态分析，识别模块之间的依赖关系，构建模块依赖图。这包括识别模块之间的 import 和 export 关系，以及模块内部的函数、变量等的定义和引用关系。</li><li><code>标记被引用的代码</code>： 从入口模块开始，Rollup 会递归地标记被引用的代码，包括跨模块的引用关系。当一个模块中的某个导出被其他模块引用时，Rollup 会标记这个导出为被引用的代码，以确保它不会被 Tree Shaking 移除。</li><li><code>剔除未被引用的代码</code>： 在标记过程中，Rollup 会识别出未被引用的代码，无论是在当前模块还是跨模块的引用关系中。这些未被引用的代码将被从最终的打包结果中剔除，以减小文件体积。</li><li><code>生成优化的输出</code>： 最终，Rollup 会生成经过跨文件 Tree Shaking 优化的输出文件，其中只包含实际被使用到的代码部分，无论这些代码是来自当前模块还是其他模块。</li></ul><blockquote><p>rollup 效果</p></blockquote><ul><li><a href="https://rollupjs.org/repl/?version=4.8.0&amp;shareable=JTdCJTIyZXhhbXBsZSUyMiUzQSUyMjAwJTIyJTJDJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMmNvZGUlMjIlM0ElMjIlMkYlMkYlMjBUUkVFLVNIQUtJTkclNUNuaW1wb3J0JTIwJTdCJTIwY3ViZSUyMCU3RCUyMGZyb20lMjAnLiUyRm1hdGhzLmpzJyUzQiU1Q24lNUNuY29uc29sZS5sb2coY3ViZSg1KSklM0IlMjAlMkYlMkYlMjAxMjUlMjIlMkMlMjJpc0VudHJ5JTIyJTNBdHJ1ZSUyQyUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTdEJTJDJTdCJTIyY29kZSUyMiUzQSUyMiUyRiUyRiUyMG1hdGhzLmpzJTVDbiU1Q24lMkYlMkYlMjBUaGlzJTIwZnVuY3Rpb24lMjBpc24ndCUyMHVzZWQlMjBhbnl3aGVyZSUyQyUyMHNvJTVDbiUyRiUyRiUyMFJvbGx1cCUyMGV4Y2x1ZGVzJTIwaXQlMjBmcm9tJTIwdGhlJTIwYnVuZGxlLi4uJTVDbmV4cG9ydCUyMGNvbnN0JTIwc3F1YXJlJTIwJTNEJTIweCUyMCUzRCUzRSUyMHglMjAqJTIweCUzQiU1Q24lNUNuJTJGJTJGJTIwVGhpcyUyMGZ1bmN0aW9uJTIwZ2V0cyUyMGluY2x1ZGVkJTVDbiUyRiUyRiUyMHJld3JpdGUlMjB0aGlzJTIwYXMlMjAlNjBzcXVhcmUoeCklMjAqJTIweCU2MCU1Q24lMkYlMkYlMjBhbmQlMjBzZWUlMjB3aGF0JTIwaGFwcGVucyElNUNuZXhwb3J0JTIwY29uc3QlMjBjdWJlJTIwJTNEJTIweCUyMCUzRCUzRSUyMHglMjAqJTIweCUyMColMjB4JTNCJTVDbiU1Q24lMkYlMkYlMjBUaGlzJTIwJTVDJTIyc2lkZSUyMGVmZmVjdCU1QyUyMiUyMGNyZWF0ZXMlMjBhJTIwZ2xvYmFsJTVDbiUyRiUyRiUyMHZhcmlhYmxlJTIwYW5kJTIwd2lsbCUyMG5vdCUyMGJlJTIwcmVtb3ZlZC4lNUNud2luZG93LmVmZmVjdDElMjAlM0QlMjAnY3JlYXRlZCclM0IlNUNuJTVDbmNvbnN0JTIwaW5jbHVkZUVmZmVjdCUyMCUzRCUyMGZhbHNlJTNCJTVDbmlmJTIwKGluY2x1ZGVFZmZlY3QpJTIwJTdCJTVDbiU1Q3QlMkYlMkYlMjBPbiUyMHRoZSUyMG90aGVyJTIwaGFuZCUyQyUyMHRoaXMlMjBpcyUyMG5ldmVyJTVDbiU1Q3QlMkYlMkYlMjBleGVjdXRlZCUyMGFuZCUyMHRodXMlMjByZW1vdmVkLiU1Q24lNUN0d2luZG93LmVmZmVjdDElMjAlM0QlMjAnbm90JTIwY3JlYXRlZCclM0IlNUNuJTdEJTIyJTJDJTIyaXNFbnRyeSUyMiUzQWZhbHNlJTJDJTIybmFtZSUyMiUzQSUyMm1hdGhzLmpzJTIyJTdEJTVEJTJDJTIyb3B0aW9ucyUyMiUzQSU3QiUyMm91dHB1dCUyMiUzQSU3QiUyMmZvcm1hdCUyMiUzQSUyMmVzJTIyJTdEJTJDJTIydHJlZXNoYWtlJTIyJTNBdHJ1ZSU3RCU3RA==" target="_blank" rel="noreferrer">rollup 在线效果</a></li></ul><p><img src="'+t+'" alt="rollup treeshaking" data-fancybox="gallery"></p><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7265125368553685050#heading-5" target="_blank" rel="noreferrer">https://juejin.cn/post/7265125368553685050#heading-5</a></li><li><a href="https://juejin.cn/post/6844903544756109319" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903544756109319</a></li></ul>',19),n=[r];function d(h,U,c,M,s,y){return a(),e("div",null,n)}const u=l(o,[["render",d]]);export{T as __pageData,u as default};
