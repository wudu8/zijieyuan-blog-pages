import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.z7kdJ_yr.js";const g=JSON.parse('{"title":"浏览器同源策略","description":"","frontmatter":{},"headers":[],"relativePath":"TechnologyExploration/前端技术探索/5.浏览器同源策略.md","filePath":"TechnologyExploration/前端技术探索/5.浏览器同源策略.md"}'),n={name:"TechnologyExploration/前端技术探索/5.浏览器同源策略.md"},l=t(`<h1 id="浏览器同源策略" tabindex="-1">浏览器同源策略 <a class="header-anchor" href="#浏览器同源策略" aria-label="Permalink to &quot;浏览器同源策略&quot;">​</a></h1><h2 id="浏览器同源策略-是什么" tabindex="-1">浏览器同源策略 是什么？ <a class="header-anchor" href="#浏览器同源策略-是什么" aria-label="Permalink to &quot;浏览器同源策略 是什么？&quot;">​</a></h2><ul><li>Same-origin policy 它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页&quot;同源&quot;。所谓&quot;同源&quot;指的是&quot;三个相同&quot; <strong><code>协议相同、域名相同、端口相同</code></strong></li></ul><h2 id="浏览器同源策略-解决了什么问题" tabindex="-1">浏览器同源策略 解决了什么问题？ <a class="header-anchor" href="#浏览器同源策略-解决了什么问题" aria-label="Permalink to &quot;浏览器同源策略 解决了什么问题？&quot;">​</a></h2><ul><li><p>为了保证用户信息的安全，防止恶意的网站窃取数据，是浏览器安全的基石</p></li><li><p>设想这样一种情况: A 网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取 A 网站的 Cookie，会发生什么？</p></li><li><p>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。</p></li></ul><p>由此可见，&quot;同源政策&quot;是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了</p><h2 id="规避方式-cookie" tabindex="-1">规避方式：Cookie <a class="header-anchor" href="#规避方式-cookie" aria-label="Permalink to &quot;规避方式：Cookie&quot;">​</a></h2><ul><li><p>Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置 document.domain 共享 Cookie。</p></li><li><p>举例来说，A 网页是<a href="http://w1.example.com/a.html%EF%BC%8CB%E7%BD%91%E9%A1%B5%E6%98%AFhttp://w2.example.com/b.html%EF%BC%8C%E9%82%A3%E4%B9%88%E5%8F%AA%E8%A6%81%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%90%8C%E7%9A%84document.domain%EF%BC%8C%E4%B8%A4%E4%B8%AA%E7%BD%91%E9%A1%B5%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%85%B1%E4%BA%ABCookie" target="_blank" rel="noreferrer">http://w1.example.com/a.html，B网页是http://w2.example.com/b.html，那么只要设置相同的document.domain，两个网页就可以共享Cookie</a></p></li><li><p><code>注意，这种方法只适用于 Cookie 和 iframe 窗口，LocalStorage 和 IndexDB 无法通过这种方法；另外，服务器也可以在设置 Cookie 的时候，指定 Cookie 的所属域名为一级域名，比如.example.com</code></p></li></ul><h2 id="规避方式-iframe" tabindex="-1">规避方式：iframe <a class="header-anchor" href="#规避方式-iframe" aria-label="Permalink to &quot;规避方式：iframe&quot;">​</a></h2><ul><li>如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的 document.domain 属性，就可以规避同源政策;对于完全不同源的网站，目前有三种方法，可以解决跨域窗口的通信问题</li></ul><h3 id="片段标识符-fragment-identifier" tabindex="-1">片段标识符（fragment identifier） <a class="header-anchor" href="#片段标识符-fragment-identifier" aria-label="Permalink to &quot;片段标识符（fragment identifier）&quot;">​</a></h3><ul><li>URL 的#号后面的部分，比如<a href="http://example.com/x.html#fragment%E7%9A%84#fragment%E3%80%82%E5%A6%82%E6%9E%9C%E5%8F%AA%E6%98%AF%E6%94%B9%E5%8F%98%E7%89%87%E6%AE%B5%E6%A0%87%E8%AF%86%E7%AC%A6%EF%BC%8C%E9%A1%B5%E9%9D%A2%E4%B8%8D%E4%BC%9A%E9%87%8D%E6%96%B0%E5%88%B7%E6%96%B0" target="_blank" rel="noreferrer">http://example.com/x.html#fragment的#fragment。如果只是改变片段标识符，页面不会重新刷新</a></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父窗口可以把信息，写入子窗口的片段标识符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myIFrame&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子窗口通过监听hashchange事件得到通知。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.onhashchange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checkMessage;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.location.hash;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子窗口也可以改变父窗口的片段标识符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parent.location.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash;</span></span></code></pre></div><h3 id="window-name" tabindex="-1">window.name <a class="header-anchor" href="#window-name" aria-label="Permalink to &quot;window.name&quot;">​</a></h3><ul><li>浏览器窗口有 window.name 属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它</li><li>优点：window.name 容量很大，可以放置非常长的字符串；</li><li>缺点：必须监听子窗口 window.name 属性的变化，影响网页性能。</li></ul><h3 id="window-postmessage" tabindex="-1">window.postMessage <a class="header-anchor" href="#window-postmessage" aria-label="Permalink to &quot;window.postMessage&quot;">​</a></h3><ul><li>HTML5 为了解决这个问题，引入了一个全新的 API：跨文档通信 API；<code>这个 API 为 window 对象新增了一个 window.postMessage 方法，允许跨窗口通信，不论这两个窗口是否同源</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// message事件的事件对象event，提供以下三个属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// event.source：发送消息的窗口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// event.origin: 消息发向的网址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// event.data: 消息内容</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子窗口通过event.source属性引用父窗口，然后发送消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, receiveMessage);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> receiveMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nice to see you!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="localstorage" tabindex="-1">LocalStorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;LocalStorage&quot;">​</a></h3><ul><li>window.postMessage，读写其他窗口的 LocalStorage 也成为了可能</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父窗口发送消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> win </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iframe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].contentWindow;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">win.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;storage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data: obj }),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;http://bbb.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子窗口将父窗口发来的消息，写入自己的LocalStorage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://bbb.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> payload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload.key, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload.data));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="规避方式-ajax-之-jsonp" tabindex="-1">规避方式：Ajax 之 Jsonp <a class="header-anchor" href="#规避方式-ajax-之-jsonp" aria-label="Permalink to &quot;规避方式：Ajax 之 Jsonp&quot;">​</a></h2><ul><li>基本思想是，通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求 JSON 数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addScriptTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> script </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  script.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  addScriptTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.com/ip?callback=foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your public IP address is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.ip);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="规避方式-ajax-之-websocket" tabindex="-1">规避方式：Ajax 之 WebSocket <a class="header-anchor" href="#规避方式-ajax-之-websocket" aria-label="Permalink to &quot;规避方式：Ajax 之 WebSocket&quot;">​</a></h2><ul><li>WebSocket 是一种通信协议，使用 ws://（非加密）和 wss://（加密）作为协议前缀。<code>该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信</code></li></ul><blockquote><p>浏览器发出的 WebSocket 请求的头信息</p></blockquote><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /chat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server.example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Upgrade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> websocket</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Upgrade</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x3JJHMbDL1EzLkh9GBhXDw==</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chat, superchat</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 13</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://example.com</span></span></code></pre></div><ul><li>有一个字段是 Origin，表示该请求的请求源（origin），即发自哪个域名。正是因为有了 Origin 这个字段，所以 WebSocket 才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信</li></ul><h2 id="规避方式-ajax-之-cors" tabindex="-1">规避方式：Ajax 之 CORS <a class="header-anchor" href="#规避方式-ajax-之-cors" aria-label="Permalink to &quot;规避方式：Ajax 之 CORS&quot;">​</a></h2><ul><li><strong><code>CORS需要浏览器和服务器同时支持</code></strong>。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</li><li>整个 CORS 通信过程，都是 <strong><code>浏览器自动完成</code></strong>，不需要用户参与。</li><li>对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。</li><li>浏览器一旦发现 AJAX 请求跨源，就会 <strong><code>自动添加一些附加的头信息</code></strong>，有时还会多出一次附加的请求，但用户不会有感觉。</li><li>实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信</li></ul><h3 id="简单请求-和-非简单请求" tabindex="-1">简单请求 和 非简单请求 <a class="header-anchor" href="#简单请求-和-非简单请求" aria-label="Permalink to &quot;简单请求 和 非简单请求&quot;">​</a></h3><ul><li>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）；浏览器对这两种请求的处理，是不一样的</li><li>只要同时满足以下两大条件，就属于简单请求</li></ul><ol><li><p>请求方法是以下三种方法之一：</p><table tabindex="0"><thead><tr><th>请求方法</th></tr></thead><tbody><tr><td>HEAD</td></tr><tr><td>GET</td></tr><tr><td>POST</td></tr></tbody></table></li><li><p>HTTP 的头信息不超出以下几种字段</p></li></ol><table tabindex="0"><thead><tr><th>HTTP 的头信息不超出以下几种字段</th><th>允许的头信息字段及其内容限制</th></tr></thead><tbody><tr><td>Accept</td><td>任意值，表示客户端可接受的内容类型范围</td></tr><tr><td>Accept-Language</td><td>任意值，表示客户端优先的语言区域设置</td></tr><tr><td>Content-Language</td><td>任意值，表示请求体中的内容所使用的语言</td></tr><tr><td>Last-Event-ID</td><td>任意值，用于服务器向客户端发送事件流时识别事件序列</td></tr><tr><td>Content-Type</td><td>只限于以下三个值：<br>1. application/x-www-form-urlencoded<br>2. multipart/form-data<br>3. text/plain</td></tr></tbody></table><p>注：以上表格中，“任意值”表示这些字段可以携带用户自定义的内容，但必须在 CORS 跨域资源共享策略允许范围内。</p><h3 id="简单请求-基本流程" tabindex="-1">简单请求 基本流程 <a class="header-anchor" href="#简单请求-基本流程" aria-label="Permalink to &quot;简单请求 基本流程&quot;">​</a></h3><ul><li><p>对于<code>简单请求</code>，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，<code>增加一个 Origin 字段</code></p></li><li><p>Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求</p></li><li><p>如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。<code>浏览器发现</code>，这个回应的头信息<code>没有包含Access-Control-Allow-Origin字段</code>，就知道出错了，从而<code>抛出一个错误，被XMLHttpRequest的onerror回调函数捕获</code></p></li><li><p>注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200</p></li><li><p>如果 Origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段</p></li></ul><table tabindex="0"><thead><tr><th>HTTP Header（响应头）</th><th>描述</th></tr></thead><tbody><tr><td><code>Access-Control-Allow-Origin</code></td><td>必须的。它的值要么是请求时 Origin 字段的值，要么是一个<code>\\*</code>，表示接受任意域名的请求求。</td></tr><tr><td><code>Access-Control-Allow-Credentials</code></td><td>一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可</td></tr><tr><td><code>Access-Control-Expose-Headers</code></td><td>请求时，XMLHttpRequest 对象的 getResponseHeader()方法只能拿到 6 个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在 Access-Control-Expose-Headers 里面指定。</td></tr></tbody></table><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://api.bob.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Credentials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Expose-Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FooBar</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=utf-8</span></span></code></pre></div><blockquote><p><strong><code>特别注意：withCredentials 属性</code></strong></p></blockquote><ul><li>CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定 Access-Control-Allow-Credentials 字段;</li><li>另一方面，开发者必须在 AJAX 请求中打开 <code>withCredentials</code> 属性。</li><li>否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理</li><li>但是，如果<code>省略withCredentials设置</code>，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭 withCredentials</li><li>需要注意的是，如果要发送 Cookie，<code>Access-Control-Allow-Origin 就不能设为星号</code>，必须指定明确的、<code>与请求网页一致的域名</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.withCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="非简单请求-流程" tabindex="-1">非简单请求 流程 <a class="header-anchor" href="#非简单请求-流程" aria-label="Permalink to &quot;非简单请求 流程&quot;">​</a></h3><ul><li><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为&quot;预检&quot;请求（preflight）</p></li><li><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HTTP请求的方法是PUT，并且发送一个自定义头信息X-Custom-Header</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://api.alice.com/cors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-Custom-Header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ul><li>浏览器发现，这是一个非简单请求，就自动发出一个&quot;预检&quot;请求，要求服务器确认可以这样请求</li></ul><blockquote><p>预检&quot;请求的 HTTP 头信息</p></blockquote><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OPTIONS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /cors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://api.bob.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Request-Method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PUT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Request-Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Custom-Header</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api.alice.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> en-US</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep-alive</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mozilla/5.0...</span></span></code></pre></div><ul><li>预检&quot;请求用的请求方法是 OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是 Origin，表示请求来自哪个源 <ul><li>Access-Control-Request-Method：字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法</li><li>Access-Control-Request-Headers：字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是 X-Custom-Header</li></ul></li></ul><blockquote><p><strong><code> 预检请求的回应</code></strong></p></blockquote><ul><li>服务器收到&quot;预检&quot;请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应</li></ul><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mon, 01 Dec 2008 01:15:39 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Apache/2.0.61 (Unix)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://api.bob.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET, POST, PUT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Custom-Header</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=utf-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Keep-Alive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout=2, max=100</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Keep-Alive</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/plain</span></span></code></pre></div><ul><li><p>上面的 HTTP 回应中，<code>关键的是 Access-Control-Allow-Origin 字段</code>，表示<a href="http://api.bob.xn--com-ys9dj4ud4z1gdcvshr3e" target="_blank" rel="noreferrer">http://api.bob.com可以请求数据</a>。该字段也可以<code>设为星号</code>，表示同意任意跨源请求</p></li><li><p>如果服务器<code>否定了&quot;预检&quot;请求</code>，会返回一个<code>正常的HTTP回应</code>，但是<code>没有任何CORS相关的头信息字段</code>。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 XMLHttpRequest 对象的 <code>onerror 回调函数捕获</code></p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XMLHttpRequest cannot load </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//api.alice.com.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Origin </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//api.bob.com is not allowed by Access-Control-Allow-Origin.</span></span></code></pre></div><ul><li>服务器回应的其他 CORS 相关字段如下 <ul><li>Access-Control-Allow-Methods：字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的<code>所有跨域请求的方法</code>。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了<code>避免多次&quot;预检&quot;请求</code></li><li>Access-Control-Allow-Headers：如果浏览器请求包括 Access-Control-Request-Headers 字段，则 Access-Control-Allow-Headers 字段是必需的。它也是一个逗号分隔的字符串，<code>表明服务器支持的所有头信息字段</code>，不限于浏览器在&quot;预检&quot;中请求的字段</li><li>Access-Control-Allow-Credentials：该字段与简单请求时的含义相同</li><li>Access-Control-Max-Age：该字段可选，用来<code>指定本次预检请求的有效期，单位为秒</code>。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。</li></ul></li></ul><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET, POST, PUT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Custom-Header</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Credentials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Max-Age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1728000</span></span></code></pre></div><blockquote><p><strong><code>浏览器的正常请求和回应</code></strong></p></blockquote><ul><li>一旦服务器通过了&quot;预检&quot;请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个 <code>Origin 头信息字段</code>。服务器的回应，也都会有一个 <code>Access-Control-Allow-Origin 头信息字段</code></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><table tabindex="0"><thead><tr><th>解决方案</th><th>描述</th></tr></thead><tbody><tr><td>Cookie</td><td>通过在请求中携带 Cookie 信息进行跨域通信。</td></tr><tr><td>document.domain</td><td>适用于主域相同，子域不同的情况，通过设置 document.domain 实现跨域通信。</td></tr><tr><td>iframe 片段识别符</td><td>通过在 URL 的片段标识符中传递信息进行跨域通信。</td></tr><tr><td>window.name</td><td>利用 window.name 属性进行跨域通信。</td></tr><tr><td>window.postMessage</td><td>使用 HTML5 中新增的 window.postMessage 方法进行跨域通信。</td></tr><tr><td>LocalStorage</td><td>利用浏览器本地存储进行跨域通信。</td></tr><tr><td>JSONP</td><td>通过动态生成 script 标签，利用 src 属性加载跨域资源，实现跨域通信。</td></tr><tr><td>WebSocket</td><td>使用 WebSocket 协议进行跨域通信，不受同源策略限制。</td></tr><tr><td>CORS</td><td>在服务器端设置响应头，允许指定的域访问资源，从而实现跨域请求。</td></tr></tbody></table><h3 id="cors-关键响应头" tabindex="-1">CORS 关键响应头 <a class="header-anchor" href="#cors-关键响应头" aria-label="Permalink to &quot;CORS 关键响应头&quot;">​</a></h3><blockquote><p>请求头</p></blockquote><table tabindex="0"><thead><tr><th>请求头字段</th><th>描述</th></tr></thead><tbody><tr><td>Origin</td><td>用来说明本次请求来自哪个源（协议 + 域名 + 端口）。</td></tr><tr><td>Access-Control-Request-Method</td><td>用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法。</td></tr><tr><td>Access-Control-Request-Headers</td><td>指定浏览器 CORS 请求会额外发送的头信息字段。</td></tr></tbody></table><blockquote><p>响应头</p></blockquote><table tabindex="0"><thead><tr><th>响应头字段</th><th>描述</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin</td><td>指定允许访问资源的域名</td></tr><tr><td>Access-Control-Allow-Methods</td><td>指定服务器支持的所有跨域请求的方法</td></tr><tr><td>Access-Control-Allow-Headers</td><td>指定服务器支持的所有头信息字段</td></tr><tr><td>Access-Control-Allow-Credentials</td><td>指定是否允许发送 Cookie。</td></tr><tr><td>Access-Control-Max-Age</td><td>指定本次预检请求的有效期，</td></tr><tr><td>Access-Control-Expose-Headers</td><td>指定浏览器可以访问的响应头字段</td></tr></tbody></table><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><a href="https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a></li></ul>`,69),e=[l];function h(p,k,d,r,o,E){return a(),i("div",null,e)}const y=s(n,[["render",h]]);export{g as __pageData,y as default};
