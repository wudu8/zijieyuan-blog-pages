import{_ as i,c as s,o as a,a3 as l}from"./chunks/framework.b23AWjfV.js";const o=JSON.parse('{"title":"飞书","description":"","frontmatter":{},"headers":[],"relativePath":"InterviewQuestions/P1 经验总结/字节-飞书.md","filePath":"InterviewQuestions/P1 经验总结/字节-飞书.md"}'),n={name:"InterviewQuestions/P1 经验总结/字节-飞书.md"},h=l(`<h1 id="飞书" tabindex="-1">飞书 <a class="header-anchor" href="#飞书" aria-label="Permalink to &quot;飞书&quot;">​</a></h1><h2 id="一面-1" tabindex="-1">一面 1 <a class="header-anchor" href="#一面-1" aria-label="Permalink to &quot;一面 1&quot;">​</a></h2><ol><li>自我介绍</li><li>问你最擅长的技术栈是什么 Vue</li><li>根据简历，问你做项目的整个流程</li><li>项目中遇到的问题，以及解决方法</li><li>网页性能优化</li><li>浏览器的循环机制</li><li>Vue2.0 添加属性的方法，$set，添加后页面会立即更新吗</li><li>Vue2.0 响应式的原理</li><li>Vue2.0 和 Vue3.0 的区别</li><li>实现 new 方法（手写代码）</li><li>实现深拷贝（手写代码）</li><li>给定两个版本号，比较大小（手写代码） <ul><li>v1=2.0 v2=1.0 输出 1</li><li>v1=2.0 v2=1.0.1 输出 1</li><li>v1=2.0 v2=3.0 输出-1</li><li>v1=2.001.1 v2=2.01.1 输出 0</li><li>v1=2.0 v2=2.0 输出 0</li><li>v1=2.0 v2=2.0.0 输出 0</li></ul></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compareVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 分割版本号字符串为数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 获取最长长度，用于循环比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxLength; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将当前段转换为整数进行比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr2[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果num1大于num2，则返回1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果num1小于num2，则返回-1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 所有段都相等时，返回0表示两者相等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="一面-2" tabindex="-1">一面 2 <a class="header-anchor" href="#一面-2" aria-label="Permalink to &quot;一面 2&quot;">​</a></h2><ol><li>var、let、const 的区别；</li><li>谈谈 promise？异步编程；为什么要异步或是要 promise？</li><li>谈到 axios 时，问了下 axios 怎么实现的，与 ajax 及 fetch 的区别？</li><li>给一段代码输出返回值？settimeout\\promise\\ascny 相关；</li><li>tcp 四次握手?</li><li>css 动画旋转相关问题？</li><li>写个点赞延时执行的函数，给定参数延迟时间及 callback？</li></ol><h2 id="一面-3" tabindex="-1">一面 3 <a class="header-anchor" href="#一面-3" aria-label="Permalink to &quot;一面 3&quot;">​</a></h2><ol><li>讲一讲微前端有哪些实现策略</li><li>讲一讲你之前的项目采取了哪些安全策略？ 讲一讲 XSS 攻击和 CSRF 攻击</li><li>实现三栏布局, 用 float + BFC 和 flex 两种方式</li><li>实现单行文本在父元素中不换行, 溢出部分变成省略号形式</li><li>防抖, 节流的定义及二者区别， 手写防抖的实现</li><li>讲一讲浏览器缓存机制， 涉及到哪些 http 报文字段？</li><li>讲一讲 js 事件循环机制， 列举宏任务, 微任务有哪些？看代码说结果</li><li>算法： 给定一个字符串, 里面只有 a, b, c 三种字符， 要求从头遍历到尾， 去掉所有的 b, 和所有的 ac</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> removeChars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      str[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (str[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳过下一个字符，因为它是和当前&#39;a&#39;组成&#39;ac&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="一面-4" tabindex="-1">一面 4 <a class="header-anchor" href="#一面-4" aria-label="Permalink to &quot;一面 4&quot;">​</a></h2><ol><li>项目难点【描述】</li><li>如何设计权限系统，如何维护和定义、表的数据结构是怎样的【举例】【描述】</li><li>中间人劫持，怎么防止。x-frame-option? 白屏怎么办？也不一定嵌入 iframe 啊，可以嵌入脚本、图片，怎么阻止</li><li>class 组件和 function 组件对比。写过安卓吗，那对 class 组件有什么看法【描述】</li><li>hook 缺点，hook 代码难维护怎么解决【描述】</li><li>redux 为什么每次 reducer 要返回一个新对象，面对大量节点如何优化【</li><li>immuatable 和 shouldupdate 配合、immuatable 数据一些对比问题【描述】</li><li>http 缓存、离线包原理、移动端首屏幕加载速度优化、webview 冷启动、预热【描述】</li><li>一个很牛逼很多功能的 class 组件，里面有业务生命周期（获取数据前后、弹出窗口前后...），怎么在函数组件里面直接复用它【举例】</li><li>给定一个整数数组 a，其中 1 ≤ a[i] ≤ n （n 为数组长度）, 其中有些元素出现两次而其他元素出现一次。【编程】</li><li>找到所有出现两次的元素。你可以不用到任何额外空间并在 O(n)时间复杂度内解决这个问题吗？</li></ol><h2 id="一面-5" tabindex="-1">一面 5 <a class="header-anchor" href="#一面-5" aria-label="Permalink to &quot;一面 5&quot;">​</a></h2><h2 id="字节校招" tabindex="-1">字节校招 <a class="header-anchor" href="#字节校招" aria-label="Permalink to &quot;字节校招&quot;">​</a></h2><ol><li>自我介绍</li><li>前端学习路线</li><li>项目中遇到的难点</li><li>token 登录怎么实现的</li><li>我想关闭浏览器后还能保持登录状态怎么实现</li><li>还有其它的登录方法吗</li><li>Vue 路由中我想用前进和后退怎么实现</li><li>项目用的什么类型路由模式</li><li>hash 模式怎么实现前进和后退</li><li>Vue 为什么要有虚拟 DOM？好处和工作流程？</li><li>如果我计算属性有三个值计算了三次，那页面渲染了几次？</li><li>那如果我又加了一个异步数据呢？</li><li>Vue 从 DOM 树建立完成到页面上呈现做了哪些工作？</li><li>Vue 的渲染机制能详细说一下吗？ <ul><li>都说标签里面要加 key，你知道为什么吗？</li><li>那 for 和 if 里面加 key 效果一样吗？</li></ul></li><li>说一下闭包。</li><li>闭包用在什么场景</li><li>重排和重绘的概念，如何可以减少？</li><li>http2.0 相比 http1.0 多了哪些特性？</li><li>为什么可以多路复用？队头阻塞了解吗？</li><li>http1.0 是怎么做的？</li><li>浏览器为什么只能建立 6 个连接？</li><li>那为什么 XXX（一个不知道的概念）允许让浏览器可以建立多个连接，不是不好吗？</li><li>浏览器的渲染线程是怎么工作的？</li><li>浏览器渲染线程和 js 线程冲突吗？是一起同时工作的？</li><li>一个浏览器只能有一个进程吗？</li><li>有没有遇到过看项目文档不懂的时候，怎么解决的？</li><li>代码题：写输出结果。</li><li>代码题：异步实现加法</li></ol><h2 id="二面-1" tabindex="-1">二面 1 <a class="header-anchor" href="#二面-1" aria-label="Permalink to &quot;二面 1&quot;">​</a></h2><ol><li>cdn 原理【描述】</li><li>为什么多域名部署【描述】</li><li>单元测试、e2e 测试【描述】</li><li>event loop【描述】</li><li>项目介绍一下【描述】</li><li>客户端 mock 怎么支持【描述】【举例】</li><li>怎么 mock 真数据，我需要真的 id 怎么办，除了写死【描述】</li><li>什么情况用 ts、什么时候不用【描述】</li><li>组件、库一定要，不重要的业务代码、节奏快的业务代码不用</li><li>单元测试和 ts 结合【描述】【举例】</li><li>全球远程调度机器实现自动化测试【描述】</li><li>cjs 实现 esm【伪代码】</li></ol><h2 id="三面-1" tabindex="-1">三面 1 <a class="header-anchor" href="#三面-1" aria-label="Permalink to &quot;三面 1&quot;">​</a></h2><ol><li>你之前的部门用的微前端什么方案</li><li>讲讲 js 原型链， 手写用 Object.create()实现继承的代码</li><li>Webpack 打包原理； 你都知道哪些 plugin， 讲讲常见的 plugin 的功能和原理；</li><li>问了一堆 babel 的配置，完全听不懂...</li><li>除了 Webpack 你还接触过哪些前端打包工具？ 讲讲 Webpack， rollup， vite 三者的区别</li><li>你们的项目是怎么解决样式隔离问题的？ CSS Module 还是 CSS in JS 你说你之前的项目用的 CSS Module, 那它有哪些缺点? 你使用:global(), 在微前端中如何做到样式隔离?</li><li>每个微前端子工程加一个 babel-plugin-react-css-modules, 打包时给该子工程内所有 class 名前面加上该子工程标识</li><li>你使用 :global() 去定义 antd 底层 class，如果 antd 版本更新， 底层 class 名变了，你怎么办？除了手动修改代码好像是没办法</li><li>讲讲 mobx 原理， 用的什么设计模式</li><li>讲讲 vuex 和 mobx 区别？ 讲讲单例模式， 观察者模式和发布-订阅模式 de</li><li>自己动手实现一个 js 单例模式</li><li>闭包 + 立即执行函数, 或者将变量绑定在全局作用域</li><li>讲讲什么是闭包</li><li>ts 里 type 和 interface 的区别以及使用场景</li><li>ts 的泛型接触过吗？ 泛型主要为了解决什么问题</li><li>Node.js 相对于原生 js 有哪些区别？</li><li>列举你知道的前端优化方案， 讲讲 React 的异步加载和懒引入原理</li><li>你刚才说到避免浏览器重排　如何获取某个 DOM 节点的位置？ 用 clientTop 和 clinetLeft 为什么会导致浏览器重排？</li><li>你刚才说优化方案里讲到避免内存泄露， 说说如何排查内存泄漏？ 火焰图接触过吗</li><li>讲讲前端工程化主要涉及哪些内容</li><li>你刚才提到规范化 那你讲讲你们项目的 git 提交规范吧</li></ol><h2 id="三面-2" tabindex="-1">三面 2 <a class="header-anchor" href="#三面-2" aria-label="Permalink to &quot;三面 2&quot;">​</a></h2><ol><li>项目介绍。权限系统业界内怎么设计，常见的几种【描述】</li><li>工作量体现到什么地方，现在工作量大吗【描述】</li><li>最困难的环节【举例】</li><li>优点缺点、未来规划</li><li>怕被人挑战吗，怎么应对</li></ol>`,20),t=[h];function k(p,e,E,r,d,g){return a(),s("div",null,t)}const F=i(n,[["render",k]]);export{o as __pageData,F as default};
