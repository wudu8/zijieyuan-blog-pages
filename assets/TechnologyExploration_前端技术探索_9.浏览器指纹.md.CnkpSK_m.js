import{_ as i,c as s,o as a,a3 as t}from"./chunks/framework.b23AWjfV.js";const n="/zijieyuan-blog-pages/assets/fingerprint.BLYylwHV.png",y=JSON.parse('{"title":"浏览器指纹（Browser Fingerprinting）","description":"","frontmatter":{},"headers":[],"relativePath":"TechnologyExploration/前端技术探索/9.浏览器指纹.md","filePath":"TechnologyExploration/前端技术探索/9.浏览器指纹.md"}'),e={name:"TechnologyExploration/前端技术探索/9.浏览器指纹.md"},l=t('<h1 id="浏览器指纹-browser-fingerprinting" tabindex="-1">浏览器指纹（Browser Fingerprinting） <a class="header-anchor" href="#浏览器指纹-browser-fingerprinting" aria-label="Permalink to &quot;浏览器指纹（Browser Fingerprinting）&quot;">​</a></h1><h2 id="浏览器指纹是什么" tabindex="-1">浏览器指纹是什么？ <a class="header-anchor" href="#浏览器指纹是什么" aria-label="Permalink to &quot;浏览器指纹是什么？&quot;">​</a></h2><ul><li><p>一种在线追踪技术，通过收集和分析用户浏览器的特定配置信息来唯一标识或区分不同的网络客户端</p></li><li><p>这些信息包括但不限于：<code>浏览器类型及版本</code>、<code>操作系统及其版本</code>、<code>屏幕分辨率</code>、<code>字体列表</code>（使用 CSS3 的@font-face 规则可以检测）、<code>插件和扩展列表</code>、<code>时区设置</code>、<code>系统语言</code>、<code>WebGL图形渲染信息</code>、<code>HTTP请求头部字段</code>（如 User-Agent）、<code>HTML5 API暴露的信息</code>（例如 canvas 画布指纹、音频上下文指纹等）</p></li><li><p>通过组合这些通常不会改变且在大多数情况下是公开可见的属性，网站能够生成一个独特的“指纹”，即使用户清除了 Cookie 或者使用了隐私浏览模式，也难以完全避免被识别和追踪。这种技术常被用于广告定向、欺诈检测、账户关联性检测等方面，但同时也引发了对用户隐私保护的关注与讨论。</p></li></ul><p><img src="'+n+`" alt="fingerprint" data-fancybox="gallery"></p><h2 id="浏览器指纹的价值" tabindex="-1">浏览器指纹的价值 <a class="header-anchor" href="#浏览器指纹的价值" aria-label="Permalink to &quot;浏览器指纹的价值&quot;">​</a></h2><ul><li><p>理论上，<code>无登录的状态下，并且浏览器中无法读取或存储持久 cookie，无法读取客户端的 IP</code>，或同一个设备上切换不同的浏览器的情况下，我们仍然可以通过浏览器指纹完全或者部分识别单个设备</p></li><li><p><code>用户追踪与识别</code>：例如在一个内容分发网站上，用户 A 喜欢浏览二次元的内容，通过浏览器指纹记录这个兴趣，那么下次用户不需要登录即可向 A 用户推送二次元的信息</p></li><li><p><code>安全性与防欺诈</code>：在需要高安全性的领域中，浏览器指纹技术可以帮助企业<code>识别潜在的恶意用户或机器人</code>，通过对访问请求进行指纹识别来提高系统的安全性和防止欺诈交易。</p></li><li><p><code>合规与监管</code>：在某些法律要求严格的地区，通过浏览器指纹可以辅助验证用户身份，确保服务仅向符合年龄、地域等条件的用户提供，从而达到合规目的。</p></li><li><p><code>数据分析</code>：企业和研究机构可以通过收集并分析浏览器指纹数据，了解用户群体的行为模式、设备分布以及市场趋势等信息。</p></li></ul><h2 id="浏览器指纹的发展" tabindex="-1">浏览器指纹的发展 <a class="header-anchor" href="#浏览器指纹的发展" aria-label="Permalink to &quot;浏览器指纹的发展&quot;">​</a></h2><h3 id="第一代-状态化追踪" tabindex="-1">第一代：状态化追踪 <a class="header-anchor" href="#第一代-状态化追踪" aria-label="Permalink to &quot;第一代：状态化追踪&quot;">​</a></h3><ul><li>主要依赖于用户登录时产生的 Cookie 和 evercookie 等技术进行追踪，这些信息需要用户的交互行为（如登录）才能获得。</li></ul><h3 id="第二代-静态浏览器指纹" tabindex="-1">第二代：静态浏览器指纹 <a class="header-anchor" href="#第二代-静态浏览器指纹" aria-label="Permalink to &quot;第二代：静态浏览器指纹&quot;">​</a></h3><ul><li>开始形成“浏览器指纹”的概念，不再局限于登录状态的标识。</li><li>通过收集浏览器的基本属性，如 User-Agent 字符串、插件信息、系统字体列表等具有区分度的特征值来构建指纹。</li><li>这些特征相对稳定，不随用户会话或浏览历史而改变。</li></ul><h3 id="第三代-动态浏览器指纹" tabindex="-1">第三代：动态浏览器指纹 <a class="header-anchor" href="#第三代-动态浏览器指纹" aria-label="Permalink to &quot;第三代：动态浏览器指纹&quot;">​</a></h3><ul><li>技术进一步发展，开始利用 Canvas 绘图、WebGL 渲染、音频上下文等多种 HTML5 API 暴露出来的细微差异性数据生成指纹。</li><li>这些动态特征能捕捉到浏览器更深层次的信息，包括硬件相关的特性，从而极大提高了用户识别的准确度。</li></ul><h3 id="第四代-行为指纹" tabindex="-1">第四代：行为指纹 <a class="header-anchor" href="#第四代-行为指纹" aria-label="Permalink to &quot;第四代：行为指纹&quot;">​</a></h3><ul><li>引入了用户行为模式作为指纹的一部分，例如鼠标移动轨迹、页面滚动速度、键盘敲击间隔等非设备固有特征。</li><li>行为指纹不仅包含静态和动态特征，还结合了时间序列的行为数据，使得追踪更为精准且难以规避。</li></ul><h2 id="浏览器基本指纹采集" tabindex="-1">浏览器基本指纹采集 <a class="header-anchor" href="#浏览器基本指纹采集" aria-label="Permalink to &quot;浏览器基本指纹采集&quot;">​</a></h2><ul><li><p>浏览器基本指纹是指那些不依赖于用户交互或网站存储的本地数据（如 Cookie），仅仅通过<code>分析客户端浏览器的基本配置信息就可以收集到的</code>、用于区分不同浏览器环境的一组属性</p></li><li><p>包括屏幕分辨率、硬件类型、操作系统、用户代理（User agent）、系统字体、语言、浏览器插件 、浏览器扩展、浏览器设置 、时区差等众多信息</p><table tabindex="0"><thead><tr><th>类型</th><th>属性</th><th>获取方式</th></tr></thead><tbody><tr><td>浏览器特征</td><td>User-Agent</td><td><code>navigator.userAgent</code></td></tr><tr><td>浏览器特征</td><td>浏览器语言</td><td><code>navigator.language</code></td></tr><tr><td>浏览器特征</td><td>插件列表</td><td><code>navigator.plugins</code></td></tr><tr><td>系统特征</td><td>操作系统信息</td><td><code>navigator.platform</code></td></tr><tr><td>时区特征</td><td>本地时间与格林威治时间差（分钟）</td><td><code>new Date().getTimezoneOffset()</code></td></tr><tr><td>时区特征</td><td>完整时区信息</td><td><strong>需查询服务器获取</strong></td></tr><tr><td>时区特征</td><td>地理位置经纬度</td><td><code>navigator.geolocation.getCurrentPosition</code></td></tr><tr><td>时区特征</td><td>地理区域名称</td><td><strong>需查询服务器获取</strong></td></tr><tr><td>时区特征</td><td>IP 地址</td><td><strong>需通过服务器接口获取</strong></td></tr><tr><td>硬件特征</td><td>最大同时触摸点数</td><td><code>navigator.maxTouchPoints</code></td></tr><tr><td>硬件特征</td><td>可用逻辑处理器核心数</td><td><code>navigator.hardwareConcurrency</code></td></tr><tr><td>屏幕特征</td><td>屏幕宽高</td><td><code>screen.width</code> 和 <code>screen.height</code></td></tr><tr><td>屏幕特征</td><td>屏幕分辨率与色彩深度组合</td><td><code>screen.width、screen.height、screen.colorDepth</code></td></tr></tbody></table></li></ul><p>注：</p><ol><li>对于需要通过服务器获取的信息，客户端 JavaScript 通常无法直接获取详细地理区域、IP 地址以及完整时区信息。</li><li>使用<code>navigator.geolocation.getCurrentPosition</code>获取经纬度时，需要用户的明确授权，并且在支持该 API 且运行在安全环境下的浏览器中调用。</li></ol><h2 id="浏览器高级指纹采集" tabindex="-1">浏览器高级指纹采集 <a class="header-anchor" href="#浏览器高级指纹采集" aria-label="Permalink to &quot;浏览器高级指纹采集&quot;">​</a></h2><h3 id="canvas-指纹" tabindex="-1">Canvas 指纹 <a class="header-anchor" href="#canvas-指纹" aria-label="Permalink to &quot;Canvas 指纹&quot;">​</a></h3><ul><li>描述：通过调用 Canvas API，绘制图形并获取渲染后的像素数据，不同浏览器和设备组合会导致细微差异。</li><li>获取方式：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;canvas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.textBaseline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;top&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;14px Arial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImageData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, canvas.width, canvas.height).data;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// imageData 为一维数组，包含了Canvas渲染后的像素信息</span></span></code></pre></div><h3 id="webgl-指纹" tabindex="-1">WebGL 指纹 <a class="header-anchor" href="#webgl-指纹" aria-label="Permalink to &quot;WebGL 指纹&quot;">​</a></h3><ul><li>描述：利用 WebGL API 获取图形处理器相关信息，不同的 GPU 会产生独特的着色器编译结果。</li><li>获取方式：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;canvas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webgl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fingerprint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fingerprint.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VENDOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fingerprint.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RENDERER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以进一步提取更多与硬件相关的参数</span></span></code></pre></div><ul><li><a href="https://github.com/fingerprintjs/fingerprintjs/blob/c411aff111e5c79cdc37608d42632d4a66a8c1dc/src/sources/canvas.ts" target="_blank" rel="noreferrer">FingerprintJS Canvas 源代码</a></li></ul><h3 id="音频-audiocontext-指纹" tabindex="-1">音频(AudioContext) 指纹 <a class="header-anchor" href="#音频-audiocontext-指纹" aria-label="Permalink to &quot;音频(AudioContext) 指纹&quot;">​</a></h3><ul><li>描述：通过 AudioContext 分析音频处理能力，不同设备的音频 API 可能存在差异性。</li><li>获取方式</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> audioContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.AudioContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.webkitAudioContext)();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fingerprint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> audioContext.destination.channelCount;</span></span></code></pre></div><ul><li><a href="https://github.com/fingerprintjs/fingerprintjs/blob/c411aff111e5c79cdc37608d42632d4a66a8c1dc/src/sources/audio.ts" target="_blank" rel="noreferrer">FingerprintJS Audio 源代码</a></li></ul><h3 id="webgl-指纹-1" tabindex="-1">WebGL 指纹 <a class="header-anchor" href="#webgl-指纹-1" aria-label="Permalink to &quot;WebGL 指纹&quot;">​</a></h3><ul><li>WebGL 指纹是一种通过浏览器的 WebGL（Web Graphics Library）API 收集设备硬件和图形处理器相关信息来创建用户唯一标识的方法。</li><li>由于不同的设备和显卡在处理 WebGL 任务时可能会产生细微的差异，这些差异可以被用来构建一个独特的指纹。</li><li>获取方式</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webgl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fingerprintData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vendor: gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VENDOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  renderer: gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RENDERER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 还可以添加其他参数...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><a href="https://github.com/fingerprintjs/fingerprintjs/blob/c411aff111e5c79cdc37608d42632d4a66a8c1dc/src/sources/webgl.ts" target="_blank" rel="noreferrer">FingerprintJS WebGL 源代码</a></li></ul><h3 id="webrtc" tabindex="-1">WebRTC <a class="header-anchor" href="#webrtc" aria-label="Permalink to &quot;WebRTC&quot;">​</a></h3><ul><li><p>WebRTC（Web Real-Time Communication）是一种允许网页浏览器进行实时通信（RTC）的技术，无需安装插件或软件。</p></li><li><p>它使得用户能够在浏览器之间直接交换音频、视频和数据流，支持点对点的音视频通话、屏幕共享等功能。</p></li><li><p>在浏览器指纹方面，WebRTC 也可以作为获取设备信息的一个来源，尽管这不是它的主要用途。</p></li><li><p>通过 <code>navigator.mediaDevices.getUserMedia() API</code> 或者相关的</p></li><li><p>WebRTC(三个主要的 APIMediaStream、RTCPeerConnection 和 RTCDataChannel) 接口，可以访问到一些设备特定的信息，例如：</p><ul><li><code>本地IP地址</code>：WebRTC 实现中可能暴露出本地网络配置的一部分，如私有 IPv4 或 IPv6 地址。</li><li><code>硬件编解码器信</code>息：不同的设备可能支持不同的音频和视频编解码器，这些信息可以通过 WebRTC 获取。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (navigator.mediaDevices </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.mediaDevices.enumerateDevices) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  navigator.mediaDevices.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enumerateDevices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">devices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devices.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        device.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; id = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> device.deviceId</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 对于音频输入设备，还可以查询其具体属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (device.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;audioinput&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 不建议在实际应用中尝试获取IP等敏感信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这里仅作为展示设备信息的例子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // WebRTC IP泄露问题已经得到现代浏览器的关注并被逐步修复</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>注意：现代浏览器已经采取措施限制 WebRTC 泄漏过多的本地设备信息，比如不再暴露本地 IP 地址</li></ul><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><p><a href="https://coveryourtracks.eff.org/" target="_blank" rel="noreferrer">电子前沿基金会浏览器指纹测试</a></p></li><li><p><a href="https://github.com/fingerprintjs/fingerprintjs" target="_blank" rel="noreferrer">FingerprintJS GitHub 仓库</a></p></li><li><p><a href="https://juejin.cn/post/7125260071990198308#heading-4" target="_blank" rel="noreferrer">浏览器指纹技术及其防范方法</a></p></li><li><p><a href="https://coveryourtracks.eff.org/learn" target="_blank" rel="noreferrer">了解浏览器指纹追踪以及防范</a></p></li></ul>`,41),h=[l];function p(k,r,d,o,E,c){return a(),s("div",null,h)}const u=i(e,[["render",p]]);export{y as __pageData,u as default};
